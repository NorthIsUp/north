[tool.ruff]
line-length = 140
preview = true
# specific rules to enable
lint.extend-select = [
    "A",     # shadowing
    "ANN",   # annotations
    "ASYNC", # async rules
    "B",     # bugbear common python bugs
    "BLE",   # blind except
    "COM",   # comma rules
    "E",     # errors
    "F",     # pyflakes
    "FA",    # future annotations
    "FURB",  # refurb rules
    "I",     # imports + isort
    "ISC",   # implicit string concatenation
    "N",     # pep8-naming
    "PLR",   # refactor rules
    "RUF",   # ruff rules
    "TC",    # type checking
    "UP",    # upgrades
    "YTT",   # modern syntax
]
# specific rules to exclude
lint.ignore = [
    "A002",    # Function argument {name} is shadowing a Python builtin # TODO: enable this
    "A005",    # Module {name} shadows a Python standard-library module # TODO: enable this
    "ANN401",  # any-type
    "COM812",  # Trailing comma missing # TODO: enable this
    "COM819",  # prohibited-trailing-comma
    "E501",    # line too long
    "PLR0911", # too many return statements for method
    "PLR0913", # too many arguments for method
    "PLR0917", # too many positional arguments for method
    "PLR2004", # Magic value used in comparison
    "PLR6301", #could be a function, class method, or static method
    "RET504",  # Unnecessary assignment to {name} before return statement
    "TC006",   # Type checking: Add quotes to type expression in typing.cast()
    "TC007",   # Type checking: Add quotes to type alias
]
# specific fixes to be more aggressive with
lint.extend-safe-fixes = [
    "FA",
    "FA102", # Add 'from __future__ import annotations' import
    "TC",
    "UP",
]
# classes that require runtime evaluation of their type annotations.
# e.g. pydantic.BaseModel types will be kept as real imports and not TYPE_CHECKING guarded
lint.flake8-type-checking.runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "pydantic_settings.BaseSettings",
]

lint.future-annotations = true

[tool.pyproject-fmt]
column_width = 1          # always wrap lists
indent = 4
keep_full_version = false # remove unnecessary trailing ``.0``'s from version specifiers

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "-ra",
    "-p no:ddtrace",
    "-p no:ddtrace.pytest_bdd",
    "-p no:ddtrace.pytest_benchmark",
]
asyncio_mode = "auto"
filterwarnings = [
    "error::pytest.PytestUnknownMarkWarning",
    "ignore::DeprecationWarning:__main__",
    "ignore::DeprecationWarning",
    "ignore::ResourceWarning",
]
log_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_level = "DEBUG"
testpaths = [
    "coding_agent",
]

[tool.pyright]
venv = ".venv"
venvPath = "."
exclude = [
    "**/__pycache__",
    "**/aws.py",
    "**/.venv",
]
pythonVersion = "3.13" # this must match the project.requires-python
reportConstantRedefinition = "error"
reportDeprecated = "warning"
reportDuplicateImport = "error"
reportImportCycles = "warning"
reportIncompatibleMethodOverride = "error"
reportInconsistentConstructor = "warning"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "warning"
reportMissingImports = "error"
reportMissingModuleSource = "error"
reportMissingTypeStubs = false
reportPrivateImportUsage = "error"
reportSelfClsParameterName = "error"
reportUnnecessaryTypeIgnoreComment = "warning"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "warning"
reportUnusedImport = "error"
strictDictionaryInference = true
strictListInference = true
strictSetInference = true
typeCheckingMode = "basic"
