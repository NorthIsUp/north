# generated by datamodel-codegen:
#   filename:  https://json.schemastore.org/pdm.json
#   timestamp: 2025-10-07T20:59:15+00:00

from __future__ import annotations

from enum import Enum

from pydantic import BaseModel, Extra, Field


class CacheMethod(Enum):
    symlink = "symlink"
    symlink_individual = "symlink_individual"
    hardlink = "hardlink"
    pth = "pth"


class Install(BaseModel):
    class Config:
        extra = Extra.forbid

    cache: bool | None = Field(True, description="Enable caching of wheel installations")
    cache_method: CacheMethod | None = Field("symlink", description="Specify how to create links to the caches")
    parallel: bool | None = Field(
        True,
        description="Whether to perform installation and uninstallation in parallel\nEnv var: PDM_PARALLEL_INSTALL",
    )


class Python(BaseModel):
    class Config:
        extra = Extra.forbid

    use_pyenv: bool | None = Field(True, description="Use the pyenv interpreter")
    use_venv: bool | None = Field(
        True,
        description="Use virtual environments when available\nEnv var: PDM_USE_VENV",
    )
    providers: list | None = Field(None, description="List of python provider names for findpython")


class Pypi(BaseModel):
    url: str | None = Field(
        "https://pypi.org/simple",
        description="The URL of PyPI mirror\nEnv var: PDM_PYPI_URL",
    )
    username: str | None = Field(None, description="The username to access PyPI\nEnv var: PDM_PYPI_USERNAME")
    password: str | None = Field(None, description="The password to access PyPI\nEnv var: PDM_PYPI_PASSWORD")
    ignore_stored_index: bool | None = Field(
        False,
        description="Ignore the configured indexes\nEnv var: PDM_IGNORE_STORED_INDEX",
    )
    verify_ssl: bool | None = Field("true", description="Verify SSL certificate when query PyPI")
    json_api: bool | None = Field(
        False,
        description="Consult PyPI's JSON API for package metadata\nEnv var: PDM_PYPI_JSON_API",
    )


class Save(Enum):
    exact = "exact"
    wildcard = "wildcard"
    minimum = "minimum"
    compatible = "compatible"


class Update(Enum):
    eager = "eager"
    reuse = "reuse"
    all = "all"
    reuse_installed = "reuse-installed"


class Strategy(BaseModel):
    class Config:
        extra = Extra.forbid

    save: Save | None = Field("minimum", description="Specify how to save versions when a package is added")
    update: Update | None = Field("reuse", description="The default strategy for updating packages")
    resolve_max_rounds: int | None = Field(
        10000,
        description="Specify the max rounds of resolution process\nEnv var: PDM_RESOLVE_MAX_ROUNDS",
    )
    inherit_metadata: bool | None = Field(True, description="Inherit the groups and markers from parents for each package")


class Venv(BaseModel):
    class Config:
        extra = Extra.forbid

    backend: str | None = Field(
        "virtualenv",
        description="Default backend to create virtualenv\nEnv var: PDM_VENV_BACKEND",
    )
    prompt: str | None = Field(
        "{project_name}-{python_version}",
        description="Formatted string to be displayed in the prompt when virtualenv is active\nEnv var: PDM_VENV_PROMPT",
    )
    in_project: bool | None = Field(
        True,
        description="Create virtualenv in .venv under project root\nEnv var: PDM_VENV_IN_PROJECT",
    )
    with_pip: bool | None = Field(
        False,
        description="Install pip when creating a new venv\n Env var: PDM_VENV_WITH_PIP",
    )


class Type(Enum):
    index = "index"
    find_links = "find_links"


class PypiDef(BaseModel):
    class Config:
        extra = Extra.forbid

    url: str = Field(..., description="The URL of custom package source")
    username: str | None = Field(None, description="The username to access custom source")
    password: str | None = Field(None, description="The password to access custom source")
    type: Type | None = Field("index", description="index or find_links")
    verify_ssl: bool | None = Field(True, description="Verify SSL certificate when query custom source")


class RepositoryDef(BaseModel):
    class Config:
        extra = Extra.forbid

    url: str | None = Field("https://pypi.org/simple", description="The URL of custom package source")
    username: str | None = Field(None, description="The username to access custom repository")
    password: str | None = Field(None, description="The password to access custom repository")
    ca_certs: str | None = Field(
        None,
        description="Path to a PEM-encoded CA cert bundle (used for server cert verification)",
    )
    verify_ssl: bool | None = Field(True, description="Verify SSL certificate when uploading to repository")


class JsonSchemaForPdmPythonPackageManagerConfigurationHttpsPdmProjectOrgLatestReferenceConfiguration(BaseModel):
    class Config:
        extra = Extra.forbid

    build_isolation: bool | None = Field(
        True,
        description="Isolate the build environment from the project environment\nEnv var: PDM_BUILD_ISOLATION",
    )
    use_uv: bool | None = Field(
        False,
        description="Use uv for faster resolution and installation\nEnv var: PDM_USE_UV",
    )
    install: Install | None = None
    python: Python | None = None
    pypi: Pypi | None = None
    strategy: Strategy | None = None
    venv: Venv | None = None
    repository: dict[str, RepositoryDef] | None = None
