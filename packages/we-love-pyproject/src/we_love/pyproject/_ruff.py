# generated by datamodel-codegen:
#   filename:  https://json.schemastore.org/ruff.json
#   timestamp: 2025-10-07T20:59:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Extra, Field, conint, constr


class Alias(BaseModel):
    __root__: str


class ApiBan(BaseModel):
    class Config:
        extra = Extra.forbid

    msg: str = Field(..., description="The message to display when the API is used.")


class BannedAliases(BaseModel):
    __root__: List[str]


class ConstantType(Enum):
    bytes = "bytes"
    complex = "complex"
    float = "float"
    int = "int"
    str = "str"


class Convention1(Enum):
    google = "google"


class Convention2(Enum):
    numpy = "numpy"


class Convention3(Enum):
    pep257 = "pep257"


class Convention(BaseModel):
    __root__: Union[Convention1, Convention2, Convention3]


class Direction1(Enum):
    dependencies = "dependencies"


class Direction2(Enum):
    dependents = "dependents"


class Direction(BaseModel):
    __root__: Union[Direction1, Direction2]


class Flake8AnnotationsOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allow_star_arg_any: Optional[bool] = Field(
        None,
        alias="allow-star-arg-any",
        description="Whether to suppress `ANN401` for dynamically typed `*args` and `**kwargs` arguments.",
    )
    ignore_fully_untyped: Optional[bool] = Field(
        None,
        alias="ignore-fully-untyped",
        description="Whether to suppress `ANN*` rules for any declaration that hasn't been typed at all. This makes it easier to gradually add types to a codebase.",
    )
    mypy_init_return: Optional[bool] = Field(
        None,
        alias="mypy-init-return",
        description="Whether to allow the omission of a return type hint for `__init__` if at least one argument is annotated.",
    )
    suppress_dummy_args: Optional[bool] = Field(
        None,
        alias="suppress-dummy-args",
        description='Whether to suppress `ANN000`-level violations for arguments matching the "dummy" variable regex (like `_`).',
    )
    suppress_none_returning: Optional[bool] = Field(
        None,
        alias="suppress-none-returning",
        description="Whether to suppress `ANN200`-level violations for functions that meet either of the following criteria:\n\n- Contain no `return` statement. - Explicit `return` statement(s) all return `None` (explicitly or implicitly).",
    )


class Flake8BanditOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allowed_markup_calls: Optional[List[str]] = Field(
        None,
        alias="allowed-markup-calls",
        description="A list of callable names, whose result may be safely passed into [`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `bleach.clean`, rather than `clean`).\n\nThis setting helps you avoid false positives in code like:\n\n```python from bleach import clean from markupsafe import Markup\n\ncleaned_markup = Markup(clean(some_user_input)) ```\n\nWhere the use of [`bleach.clean`](https://bleach.readthedocs.io/en/latest/clean.html) usually ensures that there's no XSS vulnerability.\n\nAlthough it is not recommended, you may also use this setting to whitelist other kinds of calls, e.g. calls to i18n translation functions, where how safe that is will depend on the implementation and how well the translations are audited.\n\nAnother common use-case is to wrap the output of functions that generate markup like [`xml.etree.ElementTree.tostring`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring) or template rendering engines where sanitization of potential user input is either already baked in or has to happen before rendering.",
    )
    check_typed_exception: Optional[bool] = Field(
        None,
        alias="check-typed-exception",
        description="Whether to disallow `try`-`except`-`pass` (`S110`) for specific exception types. By default, `try`-`except`-`pass` is only disallowed for `Exception` and `BaseException`.",
    )
    extend_markup_names: Optional[List[str]] = Field(
        None,
        alias="extend-markup-names",
        description="A list of additional callable names that behave like [`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `webhelpers.html.literal`, rather than `literal`).",
    )
    hardcoded_tmp_directory: Optional[List[str]] = Field(
        None,
        alias="hardcoded-tmp-directory",
        description="A list of directories to consider temporary (see `S108`).",
    )
    hardcoded_tmp_directory_extend: Optional[List[str]] = Field(
        None,
        alias="hardcoded-tmp-directory-extend",
        description="A list of directories to consider temporary, in addition to those specified by [`hardcoded-tmp-directory`](#lint_flake8-bandit_hardcoded-tmp-directory) (see `S108`).",
    )


class Flake8BooleanTrapOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    extend_allowed_calls: Optional[List[str]] = Field(
        None,
        alias="extend-allowed-calls",
        description="Additional callable functions with which to allow boolean traps.\n\nExpects to receive a list of fully-qualified names (e.g., `pydantic.Field`, rather than `Field`).",
    )


class Flake8BugbearOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    extend_immutable_calls: Optional[List[str]] = Field(
        None,
        alias="extend-immutable-calls",
        description='Additional callable functions to consider "immutable" when evaluating, e.g., the `function-call-in-default-argument` rule (`B008`) or `function-call-in-dataclass-defaults` rule (`RUF009`).\n\nExpects to receive a list of fully-qualified names (e.g., `fastapi.Query`, rather than `Query`).',
    )


class Flake8BuiltinsOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allowed_modules: Optional[List[str]] = Field(
        None,
        alias="allowed-modules",
        description="List of builtin module names to allow.",
    )
    builtins_allowed_modules: Optional[List[str]] = Field(
        None,
        alias="builtins-allowed-modules",
        description="DEPRECATED: This option has been renamed to `allowed-modules`. Use `allowed-modules` instead.\n\nList of builtin module names to allow.\n\nThis option is ignored if both `allowed-modules` and `builtins-allowed-modules` are set.",
    )
    builtins_ignorelist: Optional[List[str]] = Field(
        None,
        alias="builtins-ignorelist",
        description="DEPRECATED: This option has been renamed to `ignorelist`. Use `ignorelist` instead.\n\nIgnore list of builtins.\n\nThis option is ignored if both `ignorelist` and `builtins-ignorelist` are set.",
    )
    builtins_strict_checking: Optional[bool] = Field(
        None,
        alias="builtins-strict-checking",
        description="DEPRECATED: This option has been renamed to `strict-checking`. Use `strict-checking` instead.\n\nCompare module names instead of full module paths.\n\nThis option is ignored if both `strict-checking` and `builtins-strict-checking` are set.",
    )
    ignorelist: Optional[List[str]] = Field(None, description="Ignore list of builtins.")
    strict_checking: Optional[bool] = Field(
        None,
        alias="strict-checking",
        description="Compare module names instead of full module paths.\n\nUsed by [`A005` - `stdlib-module-shadowing`](https://docs.astral.sh/ruff/rules/stdlib-module-shadowing/).",
    )


class Flake8ComprehensionsOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allow_dict_calls_with_keyword_arguments: Optional[bool] = Field(
        None,
        alias="allow-dict-calls-with-keyword-arguments",
        description="Allow `dict` calls that make use of keyword arguments (e.g., `dict(a=1, b=2)`).",
    )


class Flake8CopyrightOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    author: Optional[str] = Field(
        None,
        description="Author to enforce within the copyright notice. If provided, the author must be present immediately following the copyright notice.",
    )
    min_file_size: Optional[conint(ge=0)] = Field(
        None,
        alias="min-file-size",
        description="A minimum file size (in bytes) required for a copyright notice to be enforced. By default, all files are validated.",
    )
    notice_rgx: Optional[str] = Field(
        None,
        alias="notice-rgx",
        description="The regular expression used to match the copyright notice, compiled with the [`regex`](https://docs.rs/regex/latest/regex/) crate. Defaults to `(?i)Copyright\\s+((?:\\(C\\)|Â©)\\s+)?\\d{4}((-|,\\s)\\d{4})*`, which matches the following:\n\n- `Copyright 2023` - `Copyright (C) 2023` - `Copyright 2021-2023` - `Copyright (C) 2021-2023` - `Copyright (C) 2021, 2023`",
    )


class Flake8ErrMsgOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    max_string_length: Optional[conint(ge=0)] = Field(
        None,
        alias="max-string-length",
        description="Maximum string length for string literals in exception messages.",
    )


class Flake8GetTextOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    extend_function_names: Optional[List[str]] = Field(
        None,
        alias="extend-function-names",
        description="Additional function names to consider as internationalization calls, in addition to those included in [`function-names`](#lint_flake8-gettext_function-names).",
    )
    function_names: Optional[List[str]] = Field(
        None,
        alias="function-names",
        description="The function names to consider as internationalization calls.",
    )


class Flake8ImplicitStrConcatOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allow_multiline: Optional[bool] = Field(
        None,
        alias="allow-multiline",
        description="Whether to allow implicit string concatenations for multiline strings. By default, implicit concatenations of multiline strings are allowed (but continuation lines, delimited with a backslash, are prohibited).\n\nSetting `allow-multiline = false` will automatically disable the `explicit-string-concatenation` (`ISC003`) rule. Otherwise, both implicit and explicit multiline string concatenations would be seen as violations, making it impossible to write a linter-compliant multiline string.",
    )


class Flake8ImportConventionsOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    aliases: Optional[Dict[str, Any]] = Field(
        None,
        description="The conventional aliases for imports. These aliases can be extended by the [`extend-aliases`](#lint_flake8-import-conventions_extend-aliases) option.",
    )
    banned_aliases: Optional[Dict[str, Any]] = Field(
        None,
        alias="banned-aliases",
        description="A mapping from module to its banned import aliases.",
    )
    banned_from: Optional[List[str]] = Field(
        None,
        alias="banned-from",
        description='A list of modules that should not be imported from using the `from ... import ...` syntax.\n\nFor example, given `banned-from = ["pandas"]`, `from pandas import DataFrame` would be disallowed, while `import pandas` would be allowed.',
        unique_items=True,
    )
    extend_aliases: Optional[Dict[str, Any]] = Field(
        None,
        alias="extend-aliases",
        description="A mapping from module to conventional import alias. These aliases will be added to the [`aliases`](#lint_flake8-import-conventions_aliases) mapping.",
    )


class Flake8SelfOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    extend_ignore_names: Optional[List[str]] = Field(
        None,
        alias="extend-ignore-names",
        description="Additional names to ignore when considering `flake8-self` violations, in addition to those included in [`ignore-names`](#lint_flake8-self_ignore-names).",
    )
    ignore_names: Optional[List[str]] = Field(
        None,
        alias="ignore-names",
        description="A list of names to ignore when considering `flake8-self` violations.",
    )


class Flake8TypeCheckingOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    exempt_modules: Optional[List[str]] = Field(
        None,
        alias="exempt-modules",
        description="Exempt certain modules from needing to be moved into type-checking blocks.",
    )
    quote_annotations: Optional[bool] = Field(
        None,
        alias="quote-annotations",
        description='Whether to add quotes around type annotations, if doing so would allow the corresponding import to be moved into a type-checking block.\n\nFor example, in the following, Python requires that `Sequence` be available at runtime, despite the fact that it\'s only used in a type annotation:\n\n```python from collections.abc import Sequence\n\ndef func(value: Sequence[int]) -> None: ... ```\n\nIn other words, moving `from collections.abc import Sequence` into an `if TYPE_CHECKING:` block above would cause a runtime error, as the type would no longer be available at runtime.\n\nBy default, Ruff will respect such runtime semantics and avoid moving the import to prevent such runtime errors.\n\nSetting `quote-annotations` to `true` will instruct Ruff to add quotes around the annotation (e.g., `"Sequence[int]"`), which in turn enables Ruff to move the import into an `if TYPE_CHECKING:` block, like so:\n\n```python from typing import TYPE_CHECKING\n\nif TYPE_CHECKING: from collections.abc import Sequence\n\ndef func(value: "Sequence[int]") -> None: ... ```\n\nNote that this setting has no effect when `from __future__ import annotations` is present, as `__future__` annotations are always treated equivalently to quoted annotations.',
    )
    runtime_evaluated_base_classes: Optional[List[str]] = Field(
        None,
        alias="runtime-evaluated-base-classes",
        description="Exempt classes that list any of the enumerated classes as a base class from needing to be moved into type-checking blocks.\n\nCommon examples include Pydantic's `pydantic.BaseModel` and SQLAlchemy's `sqlalchemy.orm.DeclarativeBase`, but can also support user-defined classes that inherit from those base classes. For example, if you define a common `DeclarativeBase` subclass that's used throughout your project (e.g., `class Base(DeclarativeBase) ...` in `base.py`), you can add it to this list (`runtime-evaluated-base-classes = [\"base.Base\"]`) to exempt models from being moved into type-checking blocks.",
    )
    runtime_evaluated_decorators: Optional[List[str]] = Field(
        None,
        alias="runtime-evaluated-decorators",
        description='Exempt classes and functions decorated with any of the enumerated decorators from being moved into type-checking blocks.\n\nCommon examples include Pydantic\'s `@pydantic.validate_call` decorator (for functions) and attrs\' `@attrs.define` decorator (for classes).\n\nThis also supports framework decorators like FastAPI\'s `fastapi.FastAPI.get` which will work across assignments in the same module.\n\nFor example: ```python import fastapi\n\napp = FastAPI("app")\n\n@app.get("/home") def home() -> str: ... ```\n\nHere `app.get` will correctly be identified as `fastapi.FastAPI.get`.',
    )
    strict: Optional[bool] = Field(
        None,
        description="Enforce `TC001`, `TC002`, and `TC003` rules even when valid runtime imports are present for the same module.\n\nSee flake8-type-checking's [strict](https://github.com/snok/flake8-type-checking#strict) option.",
    )


class Flake8UnusedArgumentsOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    ignore_variadic_names: Optional[bool] = Field(
        None,
        alias="ignore-variadic-names",
        description="Whether to allow unused variadic arguments, like `*args` and `**kwargs`.",
    )


class ImportType(Enum):
    future = "future"
    standard_library = "standard-library"
    third_party = "third-party"
    first_party = "first-party"
    local_folder = "local-folder"


class IndentStyle1(Enum):
    tab = "tab"


class IndentStyle2(Enum):
    space = "space"


class IndentStyle(BaseModel):
    __root__: Union[IndentStyle1, IndentStyle2]


class IndentWidth(BaseModel):
    __root__: conint(ge=1) = Field(..., description="The size of a tab.")


class LineEnding1(Enum):
    auto = "auto"


class LineEnding2(Enum):
    lf = "lf"


class LineEnding3(Enum):
    cr_lf = "cr-lf"


class LineEnding4(Enum):
    native = "native"


class LineEnding(BaseModel):
    __root__: Union[LineEnding1, LineEnding2, LineEnding3, LineEnding4]


class LineLength(BaseModel):
    __root__: conint(ge=1, le=320) = Field(
        ...,
        description="The length of a line of text that is considered too long.\n\nThe allowed range of values is 1..=320",
    )


class LineWidth(BaseModel):
    __root__: conint(ge=1) = Field(
        ...,
        description="The maximum visual width to which the formatter should try to limit a line.",
    )


class McCabeOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    max_complexity: Optional[conint(ge=0)] = Field(
        None,
        alias="max-complexity",
        description="The maximum McCabe complexity to allow before triggering `C901` errors.",
    )


class NameImports(BaseModel):
    __root__: str


class OutputFormat(Enum):
    concise = "concise"
    full = "full"
    json = "json"
    json_lines = "json-lines"
    junit = "junit"
    grouped = "grouped"
    github = "github"
    gitlab = "gitlab"
    pylint = "pylint"
    rdjson = "rdjson"
    azure = "azure"
    sarif = "sarif"


class ParametrizeNameType(Enum):
    csv = "csv"
    tuple = "tuple"
    list = "list"


class ParametrizeValuesRowType(Enum):
    tuple = "tuple"
    list = "list"


class ParametrizeValuesType(Enum):
    tuple = "tuple"
    list = "list"


class Pep8NamingOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    classmethod_decorators: Optional[List[str]] = Field(
        None,
        alias="classmethod-decorators",
        description="A list of decorators that, when applied to a method, indicate that the method should be treated as a class method (in addition to the builtin `@classmethod`).\n\nFor example, Ruff will expect that any method decorated by a decorator in this list takes a `cls` argument as its first argument.\n\nExpects to receive a list of fully-qualified names (e.g., `pydantic.validator`, rather than `validator`) or alternatively a plain name which is then matched against the last segment in case the decorator itself consists of a dotted name.",
    )
    extend_ignore_names: Optional[List[str]] = Field(
        None,
        alias="extend-ignore-names",
        description='Additional names (or patterns) to ignore when considering `pep8-naming` violations, in addition to those included in [`ignore-names`](#lint_pep8-naming_ignore-names).\n\nSupports glob patterns. For example, to ignore all names starting with `test_` or ending with `_test`, you could use `ignore-names = ["test_*", "*_test"]`. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).',
    )
    ignore_names: Optional[List[str]] = Field(
        None,
        alias="ignore-names",
        description='A list of names (or patterns) to ignore when considering `pep8-naming` violations.\n\nSupports glob patterns. For example, to ignore all names starting with `test_` or ending with `_test`, you could use `ignore-names = ["test_*", "*_test"]`. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).',
    )
    staticmethod_decorators: Optional[List[str]] = Field(
        None,
        alias="staticmethod-decorators",
        description="A list of decorators that, when applied to a method, indicate that the method should be treated as a static method (in addition to the builtin `@staticmethod`).\n\nFor example, Ruff will expect that any method decorated by a decorator in this list has no `self` or `cls` argument.\n\nExpects to receive a list of fully-qualified names (e.g., `belay.Device.teardown`, rather than `teardown`) or alternatively a plain name which is then matched against the last segment in case the decorator itself consists of a dotted name.",
    )


class PyUpgradeOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    keep_runtime_typing: Optional[bool] = Field(
        None,
        alias="keep-runtime-typing",
        description="Whether to avoid [PEP 585](https://peps.python.org/pep-0585/) (`List[int]` -> `list[int]`) and [PEP 604](https://peps.python.org/pep-0604/) (`Union[str, int]` -> `str | int`) rewrites even if a file imports `from __future__ import annotations`.\n\nThis setting is only applicable when the target Python version is below 3.9 and 3.10 respectively, and is most commonly used when working with libraries like Pydantic and FastAPI, which rely on the ability to parse type annotations at runtime. The use of `from __future__ import annotations` causes Python to treat the type annotations as strings, which typically allows for the use of language features that appear in later Python versions but are not yet supported by the current version (e.g., `str | int`). However, libraries that rely on runtime type annotations will break if the annotations are incompatible with the current Python version.\n\nFor example, while the following is valid Python 3.8 code due to the presence of `from __future__ import annotations`, the use of `str | int` prior to Python 3.10 will cause Pydantic to raise a `TypeError` at runtime:\n\n```python from __future__ import annotations\n\nimport pydantic\n\nclass Foo(pydantic.BaseModel): bar: str | int ```",
    )


class PycodestyleOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    ignore_overlong_task_comments: Optional[bool] = Field(
        None,
        alias="ignore-overlong-task-comments",
        description='Whether line-length violations (`E501`) should be triggered for comments starting with [`task-tags`](#lint_task-tags) (by default: "TODO", "FIXME", and "XXX").',
    )
    max_doc_length: Optional[LineLength] = Field(
        None,
        alias="max-doc-length",
        description="The maximum line length to allow for [`doc-line-too-long`](https://docs.astral.sh/ruff/rules/doc-line-too-long/) violations within documentation (`W505`), including standalone comments. By default, this is set to `null` which disables reporting violations.\n\nThe length is determined by the number of characters per line, except for lines containing Asian characters or emojis. For these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\n\nSee the [`doc-line-too-long`](https://docs.astral.sh/ruff/rules/doc-line-too-long/) rule for more information.",
    )
    max_line_length: Optional[LineLength] = Field(
        None,
        alias="max-line-length",
        description="The maximum line length to allow for [`line-too-long`](https://docs.astral.sh/ruff/rules/line-too-long/) violations. By default, this is set to the value of the [`line-length`](#line-length) option.\n\nUse this option when you want to detect extra-long lines that the formatter can't automatically split by setting `pycodestyle.line-length` to a value larger than [`line-length`](#line-length).\n\n```toml # The formatter wraps lines at a length of 88. line-length = 88\n\n[pycodestyle] # E501 reports lines that exceed the length of 100. max-line-length = 100 ```\n\nThe length is determined by the number of characters per line, except for lines containing East Asian characters or emojis. For these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\n\nSee the [`line-too-long`](https://docs.astral.sh/ruff/rules/line-too-long/) rule for more information.",
    )


class PydoclintOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    ignore_one_line_docstrings: Optional[bool] = Field(
        None,
        alias="ignore-one-line-docstrings",
        description="Skip docstrings which fit on a single line.\n\nNote: The corresponding setting in `pydoclint` is named `skip-checking-short-docstrings`.",
    )


class PydocstyleOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    convention: Optional[Convention] = Field(
        None,
        description='Whether to use Google-style, NumPy-style conventions, or the [PEP 257](https://peps.python.org/pep-0257/) defaults when analyzing docstring sections.\n\nEnabling a convention will disable all rules that are not included in the specified convention. As such, the intended workflow is to enable a convention and then selectively enable or disable any additional rules on top of it.\n\nFor example, to use Google-style conventions but avoid requiring documentation for every function parameter:\n\n```toml [tool.ruff.lint] # Enable all `pydocstyle` rules, limiting to those that adhere to the # Google convention via `convention = "google"`, below. select = ["D"]\n\n# On top of the Google convention, disable `D417`, which requires # documentation for every function parameter. ignore = ["D417"]\n\n[tool.ruff.lint.pydocstyle] convention = "google" ```\n\nTo enable an additional rule that\'s excluded from the convention, select the desired rule via its fully qualified rule code (e.g., `D400` instead of `D4` or `D40`):\n\n```toml [tool.ruff.lint] # Enable D400 on top of the Google convention. extend-select = ["D400"]\n\n[tool.ruff.lint.pydocstyle] convention = "google" ```',
    )
    ignore_decorators: Optional[List[str]] = Field(
        None,
        alias="ignore-decorators",
        description="Ignore docstrings for functions or methods decorated with the specified fully-qualified decorators.",
    )
    ignore_var_parameters: Optional[bool] = Field(
        None,
        alias="ignore-var-parameters",
        description="If set to `true`, ignore missing documentation for `*args` and `**kwargs` parameters.",
    )
    property_decorators: Optional[List[str]] = Field(
        None,
        alias="property-decorators",
        description="A list of decorators that, when applied to a method, indicate that the method should be treated as a property (in addition to the builtin `@property` and standard-library `@functools.cached_property`).\n\nFor example, Ruff will expect that any method decorated by a decorator in this list can use a non-imperative summary line.",
    )


class PyflakesOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allowed_unused_imports: Optional[List[str]] = Field(
        None,
        alias="allowed-unused-imports",
        description="A list of modules to ignore when considering unused imports.\n\nUsed to prevent violations for specific modules that are known to have side effects on import (e.g., `hvplot.pandas`).\n\nModules in this list are expected to be fully-qualified names (e.g., `hvplot.pandas`). Any submodule of a given module will also be ignored (e.g., given `hvplot`, `hvplot.pandas` will also be ignored).",
    )
    extend_generics: Optional[List[str]] = Field(
        None,
        alias="extend-generics",
        description='Additional functions or classes to consider generic, such that any subscripts should be treated as type annotation (e.g., `ForeignKey` in `django.db.models.ForeignKey["User"]`.\n\nExpects to receive a list of fully-qualified names (e.g., `django.db.models.ForeignKey`, rather than `ForeignKey`).',
    )


class PylintOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allow_dunder_method_names: Optional[List[str]] = Field(
        None,
        alias="allow-dunder-method-names",
        description="Dunder methods name to allow, in addition to the default set from the Python standard library (see `PLW3201`).",
        unique_items=True,
    )
    allow_magic_value_types: Optional[List[ConstantType]] = Field(
        None,
        alias="allow-magic-value-types",
        description='Constant types to ignore when used as "magic values" (see `PLR2004`).',
    )
    max_args: Optional[conint(ge=0)] = Field(
        None,
        alias="max-args",
        description="Maximum number of arguments allowed for a function or method definition (see `PLR0913`).",
    )
    max_bool_expr: Optional[conint(ge=0)] = Field(
        None,
        alias="max-bool-expr",
        description="Maximum number of Boolean expressions allowed within a single `if` statement (see `PLR0916`).",
    )
    max_branches: Optional[conint(ge=0)] = Field(
        None,
        alias="max-branches",
        description="Maximum number of branches allowed for a function or method body (see `PLR0912`).",
    )
    max_locals: Optional[conint(ge=0)] = Field(
        None,
        alias="max-locals",
        description="Maximum number of local variables allowed for a function or method body (see `PLR0914`).",
    )
    max_nested_blocks: Optional[conint(ge=0)] = Field(
        None,
        alias="max-nested-blocks",
        description="Maximum number of nested blocks allowed within a function or method body (see `PLR1702`).",
    )
    max_positional_args: Optional[conint(ge=0)] = Field(
        None,
        alias="max-positional-args",
        description="Maximum number of positional arguments allowed for a function or method definition (see `PLR0917`).\n\nIf not specified, defaults to the value of `max-args`.",
    )
    max_public_methods: Optional[conint(ge=0)] = Field(
        None,
        alias="max-public-methods",
        description="Maximum number of public methods allowed for a class (see `PLR0904`).",
    )
    max_returns: Optional[conint(ge=0)] = Field(
        None,
        alias="max-returns",
        description="Maximum number of return statements allowed for a function or method body (see `PLR0911`)",
    )
    max_statements: Optional[conint(ge=0)] = Field(
        None,
        alias="max-statements",
        description="Maximum number of statements allowed for a function or method body (see `PLR0915`).",
    )


class PythonVersion(Enum):
    py37 = "py37"
    py38 = "py38"
    py39 = "py39"
    py310 = "py310"
    py311 = "py311"
    py312 = "py312"
    py313 = "py313"
    py314 = "py314"


class Quote1(Enum):
    double = "double"


class Quote2(Enum):
    single = "single"


class Quote(BaseModel):
    __root__: Union[Quote1, Quote2]


class QuoteStyle(Enum):
    single = "single"
    double = "double"
    preserve = "preserve"


class RelativeImportsOrder1(Enum):
    closest_to_furthest = "closest-to-furthest"


class RelativeImportsOrder2(Enum):
    furthest_to_closest = "furthest-to-closest"


class RelativeImportsOrder(BaseModel):
    __root__: Union[RelativeImportsOrder1, RelativeImportsOrder2]


class RequiredVersion(BaseModel):
    __root__: str


class RuffOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allowed_markup_calls: Optional[List[str]] = Field(
        None,
        alias="allowed-markup-calls",
        description="A list of callable names, whose result may be safely passed into [`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `bleach.clean`, rather than `clean`).\n\nThis setting helps you avoid false positives in code like:\n\n```python from bleach import clean from markupsafe import Markup\n\ncleaned_markup = Markup(clean(some_user_input)) ```\n\nWhere the use of [`bleach.clean`](https://bleach.readthedocs.io/en/latest/clean.html) usually ensures that there's no XSS vulnerability.\n\nAlthough it is not recommended, you may also use this setting to whitelist other kinds of calls, e.g. calls to i18n translation functions, where how safe that is will depend on the implementation and how well the translations are audited.\n\nAnother common use-case is to wrap the output of functions that generate markup like [`xml.etree.ElementTree.tostring`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.tostring) or template rendering engines where sanitization of potential user input is either already baked in or has to happen before rendering.",
    )
    extend_markup_names: Optional[List[str]] = Field(
        None,
        alias="extend-markup-names",
        description="A list of additional callable names that behave like [`markupsafe.Markup`](https://markupsafe.palletsprojects.com/en/stable/escaping/#markupsafe.Markup).\n\nExpects to receive a list of fully-qualified names (e.g., `webhelpers.html.literal`, rather than `literal`).",
    )
    parenthesize_tuple_in_subscript: Optional[bool] = Field(
        None,
        alias="parenthesize-tuple-in-subscript",
        description="Whether to prefer accessing items keyed by tuples with parentheses around the tuple (see `RUF031`).",
    )


class RuleSelector(Enum):
    A = "A"
    A0 = "A0"
    A00 = "A00"
    A001 = "A001"
    A002 = "A002"
    A003 = "A003"
    A004 = "A004"
    A005 = "A005"
    A006 = "A006"
    AIR = "AIR"
    AIR0 = "AIR0"
    AIR00 = "AIR00"
    AIR001 = "AIR001"
    AIR002 = "AIR002"
    AIR3 = "AIR3"
    AIR30 = "AIR30"
    AIR301 = "AIR301"
    AIR302 = "AIR302"
    AIR31 = "AIR31"
    AIR311 = "AIR311"
    AIR312 = "AIR312"
    ALL = "ALL"
    ANN = "ANN"
    ANN0 = "ANN0"
    ANN00 = "ANN00"
    ANN001 = "ANN001"
    ANN002 = "ANN002"
    ANN003 = "ANN003"
    ANN2 = "ANN2"
    ANN20 = "ANN20"
    ANN201 = "ANN201"
    ANN202 = "ANN202"
    ANN204 = "ANN204"
    ANN205 = "ANN205"
    ANN206 = "ANN206"
    ANN4 = "ANN4"
    ANN40 = "ANN40"
    ANN401 = "ANN401"
    ARG = "ARG"
    ARG0 = "ARG0"
    ARG00 = "ARG00"
    ARG001 = "ARG001"
    ARG002 = "ARG002"
    ARG003 = "ARG003"
    ARG004 = "ARG004"
    ARG005 = "ARG005"
    ASYNC = "ASYNC"
    ASYNC1 = "ASYNC1"
    ASYNC10 = "ASYNC10"
    ASYNC100 = "ASYNC100"
    ASYNC105 = "ASYNC105"
    ASYNC109 = "ASYNC109"
    ASYNC11 = "ASYNC11"
    ASYNC110 = "ASYNC110"
    ASYNC115 = "ASYNC115"
    ASYNC116 = "ASYNC116"
    ASYNC2 = "ASYNC2"
    ASYNC21 = "ASYNC21"
    ASYNC210 = "ASYNC210"
    ASYNC212 = "ASYNC212"
    ASYNC22 = "ASYNC22"
    ASYNC220 = "ASYNC220"
    ASYNC221 = "ASYNC221"
    ASYNC222 = "ASYNC222"
    ASYNC23 = "ASYNC23"
    ASYNC230 = "ASYNC230"
    ASYNC24 = "ASYNC24"
    ASYNC240 = "ASYNC240"
    ASYNC25 = "ASYNC25"
    ASYNC250 = "ASYNC250"
    ASYNC251 = "ASYNC251"
    B = "B"
    B0 = "B0"
    B00 = "B00"
    B002 = "B002"
    B003 = "B003"
    B004 = "B004"
    B005 = "B005"
    B006 = "B006"
    B007 = "B007"
    B008 = "B008"
    B009 = "B009"
    B01 = "B01"
    B010 = "B010"
    B011 = "B011"
    B012 = "B012"
    B013 = "B013"
    B014 = "B014"
    B015 = "B015"
    B016 = "B016"
    B017 = "B017"
    B018 = "B018"
    B019 = "B019"
    B02 = "B02"
    B020 = "B020"
    B021 = "B021"
    B022 = "B022"
    B023 = "B023"
    B024 = "B024"
    B025 = "B025"
    B026 = "B026"
    B027 = "B027"
    B028 = "B028"
    B029 = "B029"
    B03 = "B03"
    B030 = "B030"
    B031 = "B031"
    B032 = "B032"
    B033 = "B033"
    B034 = "B034"
    B035 = "B035"
    B039 = "B039"
    B9 = "B9"
    B90 = "B90"
    B901 = "B901"
    B903 = "B903"
    B904 = "B904"
    B905 = "B905"
    B909 = "B909"
    B91 = "B91"
    B911 = "B911"
    B912 = "B912"
    BLE = "BLE"
    BLE0 = "BLE0"
    BLE00 = "BLE00"
    BLE001 = "BLE001"
    C = "C"
    C4 = "C4"
    C40 = "C40"
    C400 = "C400"
    C401 = "C401"
    C402 = "C402"
    C403 = "C403"
    C404 = "C404"
    C405 = "C405"
    C406 = "C406"
    C408 = "C408"
    C409 = "C409"
    C41 = "C41"
    C410 = "C410"
    C411 = "C411"
    C413 = "C413"
    C414 = "C414"
    C415 = "C415"
    C416 = "C416"
    C417 = "C417"
    C418 = "C418"
    C419 = "C419"
    C42 = "C42"
    C420 = "C420"
    C9 = "C9"
    C90 = "C90"
    C901 = "C901"
    COM = "COM"
    COM8 = "COM8"
    COM81 = "COM81"
    COM812 = "COM812"
    COM818 = "COM818"
    COM819 = "COM819"
    CPY = "CPY"
    CPY0 = "CPY0"
    CPY00 = "CPY00"
    CPY001 = "CPY001"
    D = "D"
    D1 = "D1"
    D10 = "D10"
    D100 = "D100"
    D101 = "D101"
    D102 = "D102"
    D103 = "D103"
    D104 = "D104"
    D105 = "D105"
    D106 = "D106"
    D107 = "D107"
    D2 = "D2"
    D20 = "D20"
    D200 = "D200"
    D201 = "D201"
    D202 = "D202"
    D203 = "D203"
    D204 = "D204"
    D205 = "D205"
    D206 = "D206"
    D207 = "D207"
    D208 = "D208"
    D209 = "D209"
    D21 = "D21"
    D210 = "D210"
    D211 = "D211"
    D212 = "D212"
    D213 = "D213"
    D214 = "D214"
    D215 = "D215"
    D3 = "D3"
    D30 = "D30"
    D300 = "D300"
    D301 = "D301"
    D4 = "D4"
    D40 = "D40"
    D400 = "D400"
    D401 = "D401"
    D402 = "D402"
    D403 = "D403"
    D404 = "D404"
    D405 = "D405"
    D406 = "D406"
    D407 = "D407"
    D408 = "D408"
    D409 = "D409"
    D41 = "D41"
    D410 = "D410"
    D411 = "D411"
    D412 = "D412"
    D413 = "D413"
    D414 = "D414"
    D415 = "D415"
    D416 = "D416"
    D417 = "D417"
    D418 = "D418"
    D419 = "D419"
    DJ = "DJ"
    DJ0 = "DJ0"
    DJ00 = "DJ00"
    DJ001 = "DJ001"
    DJ003 = "DJ003"
    DJ006 = "DJ006"
    DJ007 = "DJ007"
    DJ008 = "DJ008"
    DJ01 = "DJ01"
    DJ012 = "DJ012"
    DJ013 = "DJ013"
    DOC = "DOC"
    DOC2 = "DOC2"
    DOC20 = "DOC20"
    DOC201 = "DOC201"
    DOC202 = "DOC202"
    DOC4 = "DOC4"
    DOC40 = "DOC40"
    DOC402 = "DOC402"
    DOC403 = "DOC403"
    DOC5 = "DOC5"
    DOC50 = "DOC50"
    DOC501 = "DOC501"
    DOC502 = "DOC502"
    DTZ = "DTZ"
    DTZ0 = "DTZ0"
    DTZ00 = "DTZ00"
    DTZ001 = "DTZ001"
    DTZ002 = "DTZ002"
    DTZ003 = "DTZ003"
    DTZ004 = "DTZ004"
    DTZ005 = "DTZ005"
    DTZ006 = "DTZ006"
    DTZ007 = "DTZ007"
    DTZ01 = "DTZ01"
    DTZ011 = "DTZ011"
    DTZ012 = "DTZ012"
    DTZ9 = "DTZ9"
    DTZ90 = "DTZ90"
    DTZ901 = "DTZ901"
    E = "E"
    E1 = "E1"
    E10 = "E10"
    E101 = "E101"
    E11 = "E11"
    E111 = "E111"
    E112 = "E112"
    E113 = "E113"
    E114 = "E114"
    E115 = "E115"
    E116 = "E116"
    E117 = "E117"
    E2 = "E2"
    E20 = "E20"
    E201 = "E201"
    E202 = "E202"
    E203 = "E203"
    E204 = "E204"
    E21 = "E21"
    E211 = "E211"
    E22 = "E22"
    E221 = "E221"
    E222 = "E222"
    E223 = "E223"
    E224 = "E224"
    E225 = "E225"
    E226 = "E226"
    E227 = "E227"
    E228 = "E228"
    E23 = "E23"
    E231 = "E231"
    E24 = "E24"
    E241 = "E241"
    E242 = "E242"
    E25 = "E25"
    E251 = "E251"
    E252 = "E252"
    E26 = "E26"
    E261 = "E261"
    E262 = "E262"
    E265 = "E265"
    E266 = "E266"
    E27 = "E27"
    E271 = "E271"
    E272 = "E272"
    E273 = "E273"
    E274 = "E274"
    E275 = "E275"
    E3 = "E3"
    E30 = "E30"
    E301 = "E301"
    E302 = "E302"
    E303 = "E303"
    E304 = "E304"
    E305 = "E305"
    E306 = "E306"
    E4 = "E4"
    E40 = "E40"
    E401 = "E401"
    E402 = "E402"
    E5 = "E5"
    E50 = "E50"
    E501 = "E501"
    E502 = "E502"
    E7 = "E7"
    E70 = "E70"
    E701 = "E701"
    E702 = "E702"
    E703 = "E703"
    E71 = "E71"
    E711 = "E711"
    E712 = "E712"
    E713 = "E713"
    E714 = "E714"
    E72 = "E72"
    E721 = "E721"
    E722 = "E722"
    E73 = "E73"
    E731 = "E731"
    E74 = "E74"
    E741 = "E741"
    E742 = "E742"
    E743 = "E743"
    E9 = "E9"
    E90 = "E90"
    E902 = "E902"
    EM = "EM"
    EM1 = "EM1"
    EM10 = "EM10"
    EM101 = "EM101"
    EM102 = "EM102"
    EM103 = "EM103"
    ERA = "ERA"
    ERA0 = "ERA0"
    ERA00 = "ERA00"
    ERA001 = "ERA001"
    EXE = "EXE"
    EXE0 = "EXE0"
    EXE00 = "EXE00"
    EXE001 = "EXE001"
    EXE002 = "EXE002"
    EXE003 = "EXE003"
    EXE004 = "EXE004"
    EXE005 = "EXE005"
    F = "F"
    F4 = "F4"
    F40 = "F40"
    F401 = "F401"
    F402 = "F402"
    F403 = "F403"
    F404 = "F404"
    F405 = "F405"
    F406 = "F406"
    F407 = "F407"
    F5 = "F5"
    F50 = "F50"
    F501 = "F501"
    F502 = "F502"
    F503 = "F503"
    F504 = "F504"
    F505 = "F505"
    F506 = "F506"
    F507 = "F507"
    F508 = "F508"
    F509 = "F509"
    F52 = "F52"
    F521 = "F521"
    F522 = "F522"
    F523 = "F523"
    F524 = "F524"
    F525 = "F525"
    F54 = "F54"
    F541 = "F541"
    F6 = "F6"
    F60 = "F60"
    F601 = "F601"
    F602 = "F602"
    F62 = "F62"
    F621 = "F621"
    F622 = "F622"
    F63 = "F63"
    F631 = "F631"
    F632 = "F632"
    F633 = "F633"
    F634 = "F634"
    F7 = "F7"
    F70 = "F70"
    F701 = "F701"
    F702 = "F702"
    F704 = "F704"
    F706 = "F706"
    F707 = "F707"
    F72 = "F72"
    F722 = "F722"
    F8 = "F8"
    F81 = "F81"
    F811 = "F811"
    F82 = "F82"
    F821 = "F821"
    F822 = "F822"
    F823 = "F823"
    F84 = "F84"
    F841 = "F841"
    F842 = "F842"
    F9 = "F9"
    F90 = "F90"
    F901 = "F901"
    FA = "FA"
    FA1 = "FA1"
    FA10 = "FA10"
    FA100 = "FA100"
    FA102 = "FA102"
    FAST = "FAST"
    FAST0 = "FAST0"
    FAST00 = "FAST00"
    FAST001 = "FAST001"
    FAST002 = "FAST002"
    FAST003 = "FAST003"
    FBT = "FBT"
    FBT0 = "FBT0"
    FBT00 = "FBT00"
    FBT001 = "FBT001"
    FBT002 = "FBT002"
    FBT003 = "FBT003"
    FIX = "FIX"
    FIX0 = "FIX0"
    FIX00 = "FIX00"
    FIX001 = "FIX001"
    FIX002 = "FIX002"
    FIX003 = "FIX003"
    FIX004 = "FIX004"
    FLY = "FLY"
    FLY0 = "FLY0"
    FLY00 = "FLY00"
    FLY002 = "FLY002"
    FURB = "FURB"
    FURB1 = "FURB1"
    FURB10 = "FURB10"
    FURB101 = "FURB101"
    FURB103 = "FURB103"
    FURB105 = "FURB105"
    FURB11 = "FURB11"
    FURB110 = "FURB110"
    FURB113 = "FURB113"
    FURB116 = "FURB116"
    FURB118 = "FURB118"
    FURB12 = "FURB12"
    FURB122 = "FURB122"
    FURB129 = "FURB129"
    FURB13 = "FURB13"
    FURB131 = "FURB131"
    FURB132 = "FURB132"
    FURB136 = "FURB136"
    FURB14 = "FURB14"
    FURB140 = "FURB140"
    FURB142 = "FURB142"
    FURB145 = "FURB145"
    FURB148 = "FURB148"
    FURB15 = "FURB15"
    FURB152 = "FURB152"
    FURB154 = "FURB154"
    FURB156 = "FURB156"
    FURB157 = "FURB157"
    FURB16 = "FURB16"
    FURB161 = "FURB161"
    FURB162 = "FURB162"
    FURB163 = "FURB163"
    FURB164 = "FURB164"
    FURB166 = "FURB166"
    FURB167 = "FURB167"
    FURB168 = "FURB168"
    FURB169 = "FURB169"
    FURB17 = "FURB17"
    FURB171 = "FURB171"
    FURB177 = "FURB177"
    FURB18 = "FURB18"
    FURB180 = "FURB180"
    FURB181 = "FURB181"
    FURB187 = "FURB187"
    FURB188 = "FURB188"
    FURB189 = "FURB189"
    FURB19 = "FURB19"
    FURB192 = "FURB192"
    G = "G"
    G0 = "G0"
    G00 = "G00"
    G001 = "G001"
    G002 = "G002"
    G003 = "G003"
    G004 = "G004"
    G01 = "G01"
    G010 = "G010"
    G1 = "G1"
    G10 = "G10"
    G101 = "G101"
    G2 = "G2"
    G20 = "G20"
    G201 = "G201"
    G202 = "G202"
    I = "I"
    I0 = "I0"
    I00 = "I00"
    I001 = "I001"
    I002 = "I002"
    ICN = "ICN"
    ICN0 = "ICN0"
    ICN00 = "ICN00"
    ICN001 = "ICN001"
    ICN002 = "ICN002"
    ICN003 = "ICN003"
    INP = "INP"
    INP0 = "INP0"
    INP00 = "INP00"
    INP001 = "INP001"
    INT = "INT"
    INT0 = "INT0"
    INT00 = "INT00"
    INT001 = "INT001"
    INT002 = "INT002"
    INT003 = "INT003"
    ISC = "ISC"
    ISC0 = "ISC0"
    ISC00 = "ISC00"
    ISC001 = "ISC001"
    ISC002 = "ISC002"
    ISC003 = "ISC003"
    LOG = "LOG"
    LOG0 = "LOG0"
    LOG00 = "LOG00"
    LOG001 = "LOG001"
    LOG002 = "LOG002"
    LOG004 = "LOG004"
    LOG007 = "LOG007"
    LOG009 = "LOG009"
    LOG01 = "LOG01"
    LOG014 = "LOG014"
    LOG015 = "LOG015"
    N = "N"
    N8 = "N8"
    N80 = "N80"
    N801 = "N801"
    N802 = "N802"
    N803 = "N803"
    N804 = "N804"
    N805 = "N805"
    N806 = "N806"
    N807 = "N807"
    N81 = "N81"
    N811 = "N811"
    N812 = "N812"
    N813 = "N813"
    N814 = "N814"
    N815 = "N815"
    N816 = "N816"
    N817 = "N817"
    N818 = "N818"
    N9 = "N9"
    N99 = "N99"
    N999 = "N999"
    NPY = "NPY"
    NPY0 = "NPY0"
    NPY00 = "NPY00"
    NPY001 = "NPY001"
    NPY002 = "NPY002"
    NPY003 = "NPY003"
    NPY2 = "NPY2"
    NPY20 = "NPY20"
    NPY201 = "NPY201"
    PD = "PD"
    PD0 = "PD0"
    PD00 = "PD00"
    PD002 = "PD002"
    PD003 = "PD003"
    PD004 = "PD004"
    PD007 = "PD007"
    PD008 = "PD008"
    PD009 = "PD009"
    PD01 = "PD01"
    PD010 = "PD010"
    PD011 = "PD011"
    PD012 = "PD012"
    PD013 = "PD013"
    PD015 = "PD015"
    PD1 = "PD1"
    PD10 = "PD10"
    PD101 = "PD101"
    PERF = "PERF"
    PERF1 = "PERF1"
    PERF10 = "PERF10"
    PERF101 = "PERF101"
    PERF102 = "PERF102"
    PERF2 = "PERF2"
    PERF20 = "PERF20"
    PERF203 = "PERF203"
    PERF4 = "PERF4"
    PERF40 = "PERF40"
    PERF401 = "PERF401"
    PERF402 = "PERF402"
    PERF403 = "PERF403"
    PGH = "PGH"
    PGH0 = "PGH0"
    PGH00 = "PGH00"
    PGH003 = "PGH003"
    PGH004 = "PGH004"
    PGH005 = "PGH005"
    PIE = "PIE"
    PIE7 = "PIE7"
    PIE79 = "PIE79"
    PIE790 = "PIE790"
    PIE794 = "PIE794"
    PIE796 = "PIE796"
    PIE8 = "PIE8"
    PIE80 = "PIE80"
    PIE800 = "PIE800"
    PIE804 = "PIE804"
    PIE807 = "PIE807"
    PIE808 = "PIE808"
    PIE81 = "PIE81"
    PIE810 = "PIE810"
    PL = "PL"
    PLC = "PLC"
    PLC0 = "PLC0"
    PLC01 = "PLC01"
    PLC010 = "PLC010"
    PLC0105 = "PLC0105"
    PLC013 = "PLC013"
    PLC0131 = "PLC0131"
    PLC0132 = "PLC0132"
    PLC02 = "PLC02"
    PLC020 = "PLC020"
    PLC0205 = "PLC0205"
    PLC0206 = "PLC0206"
    PLC0207 = "PLC0207"
    PLC0208 = "PLC0208"
    PLC04 = "PLC04"
    PLC041 = "PLC041"
    PLC0414 = "PLC0414"
    PLC0415 = "PLC0415"
    PLC1 = "PLC1"
    PLC18 = "PLC18"
    PLC180 = "PLC180"
    PLC1802 = "PLC1802"
    PLC19 = "PLC19"
    PLC190 = "PLC190"
    PLC1901 = "PLC1901"
    PLC2 = "PLC2"
    PLC24 = "PLC24"
    PLC240 = "PLC240"
    PLC2401 = "PLC2401"
    PLC2403 = "PLC2403"
    PLC27 = "PLC27"
    PLC270 = "PLC270"
    PLC2701 = "PLC2701"
    PLC28 = "PLC28"
    PLC280 = "PLC280"
    PLC2801 = "PLC2801"
    PLC3 = "PLC3"
    PLC30 = "PLC30"
    PLC300 = "PLC300"
    PLC3002 = "PLC3002"
    PLE = "PLE"
    PLE0 = "PLE0"
    PLE01 = "PLE01"
    PLE010 = "PLE010"
    PLE0100 = "PLE0100"
    PLE0101 = "PLE0101"
    PLE011 = "PLE011"
    PLE0115 = "PLE0115"
    PLE0116 = "PLE0116"
    PLE0117 = "PLE0117"
    PLE0118 = "PLE0118"
    PLE02 = "PLE02"
    PLE023 = "PLE023"
    PLE0237 = "PLE0237"
    PLE024 = "PLE024"
    PLE0241 = "PLE0241"
    PLE03 = "PLE03"
    PLE030 = "PLE030"
    PLE0302 = "PLE0302"
    PLE0303 = "PLE0303"
    PLE0304 = "PLE0304"
    PLE0305 = "PLE0305"
    PLE0307 = "PLE0307"
    PLE0308 = "PLE0308"
    PLE0309 = "PLE0309"
    PLE06 = "PLE06"
    PLE060 = "PLE060"
    PLE0604 = "PLE0604"
    PLE0605 = "PLE0605"
    PLE064 = "PLE064"
    PLE0643 = "PLE0643"
    PLE07 = "PLE07"
    PLE070 = "PLE070"
    PLE0704 = "PLE0704"
    PLE1 = "PLE1"
    PLE11 = "PLE11"
    PLE113 = "PLE113"
    PLE1132 = "PLE1132"
    PLE114 = "PLE114"
    PLE1141 = "PLE1141"
    PLE1142 = "PLE1142"
    PLE12 = "PLE12"
    PLE120 = "PLE120"
    PLE1205 = "PLE1205"
    PLE1206 = "PLE1206"
    PLE13 = "PLE13"
    PLE130 = "PLE130"
    PLE1300 = "PLE1300"
    PLE1307 = "PLE1307"
    PLE131 = "PLE131"
    PLE1310 = "PLE1310"
    PLE15 = "PLE15"
    PLE150 = "PLE150"
    PLE1507 = "PLE1507"
    PLE151 = "PLE151"
    PLE1519 = "PLE1519"
    PLE152 = "PLE152"
    PLE1520 = "PLE1520"
    PLE17 = "PLE17"
    PLE170 = "PLE170"
    PLE1700 = "PLE1700"
    PLE2 = "PLE2"
    PLE25 = "PLE25"
    PLE250 = "PLE250"
    PLE2502 = "PLE2502"
    PLE251 = "PLE251"
    PLE2510 = "PLE2510"
    PLE2512 = "PLE2512"
    PLE2513 = "PLE2513"
    PLE2514 = "PLE2514"
    PLE2515 = "PLE2515"
    PLE4 = "PLE4"
    PLE47 = "PLE47"
    PLE470 = "PLE470"
    PLE4703 = "PLE4703"
    PLR = "PLR"
    PLR0 = "PLR0"
    PLR01 = "PLR01"
    PLR012 = "PLR012"
    PLR0124 = "PLR0124"
    PLR013 = "PLR013"
    PLR0133 = "PLR0133"
    PLR02 = "PLR02"
    PLR020 = "PLR020"
    PLR0202 = "PLR0202"
    PLR0203 = "PLR0203"
    PLR0206 = "PLR0206"
    PLR04 = "PLR04"
    PLR040 = "PLR040"
    PLR0402 = "PLR0402"
    PLR09 = "PLR09"
    PLR090 = "PLR090"
    PLR0904 = "PLR0904"
    PLR091 = "PLR091"
    PLR0911 = "PLR0911"
    PLR0912 = "PLR0912"
    PLR0913 = "PLR0913"
    PLR0914 = "PLR0914"
    PLR0915 = "PLR0915"
    PLR0916 = "PLR0916"
    PLR0917 = "PLR0917"
    PLR1 = "PLR1"
    PLR17 = "PLR17"
    PLR170 = "PLR170"
    PLR1702 = "PLR1702"
    PLR1704 = "PLR1704"
    PLR171 = "PLR171"
    PLR1711 = "PLR1711"
    PLR1714 = "PLR1714"
    PLR1716 = "PLR1716"
    PLR172 = "PLR172"
    PLR1722 = "PLR1722"
    PLR173 = "PLR173"
    PLR1730 = "PLR1730"
    PLR1733 = "PLR1733"
    PLR1736 = "PLR1736"
    PLR2 = "PLR2"
    PLR20 = "PLR20"
    PLR200 = "PLR200"
    PLR2004 = "PLR2004"
    PLR204 = "PLR204"
    PLR2044 = "PLR2044"
    PLR5 = "PLR5"
    PLR55 = "PLR55"
    PLR550 = "PLR550"
    PLR5501 = "PLR5501"
    PLR6 = "PLR6"
    PLR61 = "PLR61"
    PLR610 = "PLR610"
    PLR6104 = "PLR6104"
    PLR62 = "PLR62"
    PLR620 = "PLR620"
    PLR6201 = "PLR6201"
    PLR63 = "PLR63"
    PLR630 = "PLR630"
    PLR6301 = "PLR6301"
    PLW = "PLW"
    PLW0 = "PLW0"
    PLW01 = "PLW01"
    PLW010 = "PLW010"
    PLW0108 = "PLW0108"
    PLW012 = "PLW012"
    PLW0120 = "PLW0120"
    PLW0127 = "PLW0127"
    PLW0128 = "PLW0128"
    PLW0129 = "PLW0129"
    PLW013 = "PLW013"
    PLW0131 = "PLW0131"
    PLW0133 = "PLW0133"
    PLW017 = "PLW017"
    PLW0177 = "PLW0177"
    PLW02 = "PLW02"
    PLW021 = "PLW021"
    PLW0211 = "PLW0211"
    PLW024 = "PLW024"
    PLW0244 = "PLW0244"
    PLW0245 = "PLW0245"
    PLW04 = "PLW04"
    PLW040 = "PLW040"
    PLW0406 = "PLW0406"
    PLW06 = "PLW06"
    PLW060 = "PLW060"
    PLW0602 = "PLW0602"
    PLW0603 = "PLW0603"
    PLW0604 = "PLW0604"
    PLW064 = "PLW064"
    PLW0642 = "PLW0642"
    PLW07 = "PLW07"
    PLW071 = "PLW071"
    PLW0711 = "PLW0711"
    PLW1 = "PLW1"
    PLW15 = "PLW15"
    PLW150 = "PLW150"
    PLW1501 = "PLW1501"
    PLW1507 = "PLW1507"
    PLW1508 = "PLW1508"
    PLW1509 = "PLW1509"
    PLW151 = "PLW151"
    PLW1510 = "PLW1510"
    PLW1514 = "PLW1514"
    PLW16 = "PLW16"
    PLW164 = "PLW164"
    PLW1641 = "PLW1641"
    PLW2 = "PLW2"
    PLW21 = "PLW21"
    PLW210 = "PLW210"
    PLW2101 = "PLW2101"
    PLW29 = "PLW29"
    PLW290 = "PLW290"
    PLW2901 = "PLW2901"
    PLW3 = "PLW3"
    PLW32 = "PLW32"
    PLW320 = "PLW320"
    PLW3201 = "PLW3201"
    PLW33 = "PLW33"
    PLW330 = "PLW330"
    PLW3301 = "PLW3301"
    PT = "PT"
    PT0 = "PT0"
    PT00 = "PT00"
    PT001 = "PT001"
    PT002 = "PT002"
    PT003 = "PT003"
    PT006 = "PT006"
    PT007 = "PT007"
    PT008 = "PT008"
    PT009 = "PT009"
    PT01 = "PT01"
    PT010 = "PT010"
    PT011 = "PT011"
    PT012 = "PT012"
    PT013 = "PT013"
    PT014 = "PT014"
    PT015 = "PT015"
    PT016 = "PT016"
    PT017 = "PT017"
    PT018 = "PT018"
    PT019 = "PT019"
    PT02 = "PT02"
    PT020 = "PT020"
    PT021 = "PT021"
    PT022 = "PT022"
    PT023 = "PT023"
    PT024 = "PT024"
    PT025 = "PT025"
    PT026 = "PT026"
    PT027 = "PT027"
    PT028 = "PT028"
    PT029 = "PT029"
    PT03 = "PT03"
    PT030 = "PT030"
    PT031 = "PT031"
    PTH = "PTH"
    PTH1 = "PTH1"
    PTH10 = "PTH10"
    PTH100 = "PTH100"
    PTH101 = "PTH101"
    PTH102 = "PTH102"
    PTH103 = "PTH103"
    PTH104 = "PTH104"
    PTH105 = "PTH105"
    PTH106 = "PTH106"
    PTH107 = "PTH107"
    PTH108 = "PTH108"
    PTH109 = "PTH109"
    PTH11 = "PTH11"
    PTH110 = "PTH110"
    PTH111 = "PTH111"
    PTH112 = "PTH112"
    PTH113 = "PTH113"
    PTH114 = "PTH114"
    PTH115 = "PTH115"
    PTH116 = "PTH116"
    PTH117 = "PTH117"
    PTH118 = "PTH118"
    PTH119 = "PTH119"
    PTH12 = "PTH12"
    PTH120 = "PTH120"
    PTH121 = "PTH121"
    PTH122 = "PTH122"
    PTH123 = "PTH123"
    PTH124 = "PTH124"
    PTH2 = "PTH2"
    PTH20 = "PTH20"
    PTH201 = "PTH201"
    PTH202 = "PTH202"
    PTH203 = "PTH203"
    PTH204 = "PTH204"
    PTH205 = "PTH205"
    PTH206 = "PTH206"
    PTH207 = "PTH207"
    PTH208 = "PTH208"
    PTH21 = "PTH21"
    PTH210 = "PTH210"
    PTH211 = "PTH211"
    PYI = "PYI"
    PYI0 = "PYI0"
    PYI00 = "PYI00"
    PYI001 = "PYI001"
    PYI002 = "PYI002"
    PYI003 = "PYI003"
    PYI004 = "PYI004"
    PYI005 = "PYI005"
    PYI006 = "PYI006"
    PYI007 = "PYI007"
    PYI008 = "PYI008"
    PYI009 = "PYI009"
    PYI01 = "PYI01"
    PYI010 = "PYI010"
    PYI011 = "PYI011"
    PYI012 = "PYI012"
    PYI013 = "PYI013"
    PYI014 = "PYI014"
    PYI015 = "PYI015"
    PYI016 = "PYI016"
    PYI017 = "PYI017"
    PYI018 = "PYI018"
    PYI019 = "PYI019"
    PYI02 = "PYI02"
    PYI020 = "PYI020"
    PYI021 = "PYI021"
    PYI024 = "PYI024"
    PYI025 = "PYI025"
    PYI026 = "PYI026"
    PYI029 = "PYI029"
    PYI03 = "PYI03"
    PYI030 = "PYI030"
    PYI032 = "PYI032"
    PYI033 = "PYI033"
    PYI034 = "PYI034"
    PYI035 = "PYI035"
    PYI036 = "PYI036"
    PYI04 = "PYI04"
    PYI041 = "PYI041"
    PYI042 = "PYI042"
    PYI043 = "PYI043"
    PYI044 = "PYI044"
    PYI045 = "PYI045"
    PYI046 = "PYI046"
    PYI047 = "PYI047"
    PYI048 = "PYI048"
    PYI049 = "PYI049"
    PYI05 = "PYI05"
    PYI050 = "PYI050"
    PYI051 = "PYI051"
    PYI052 = "PYI052"
    PYI053 = "PYI053"
    PYI054 = "PYI054"
    PYI055 = "PYI055"
    PYI056 = "PYI056"
    PYI057 = "PYI057"
    PYI058 = "PYI058"
    PYI059 = "PYI059"
    PYI06 = "PYI06"
    PYI061 = "PYI061"
    PYI062 = "PYI062"
    PYI063 = "PYI063"
    PYI064 = "PYI064"
    PYI066 = "PYI066"
    Q = "Q"
    Q0 = "Q0"
    Q00 = "Q00"
    Q000 = "Q000"
    Q001 = "Q001"
    Q002 = "Q002"
    Q003 = "Q003"
    Q004 = "Q004"
    RET = "RET"
    RET5 = "RET5"
    RET50 = "RET50"
    RET501 = "RET501"
    RET502 = "RET502"
    RET503 = "RET503"
    RET504 = "RET504"
    RET505 = "RET505"
    RET506 = "RET506"
    RET507 = "RET507"
    RET508 = "RET508"
    RSE = "RSE"
    RSE1 = "RSE1"
    RSE10 = "RSE10"
    RSE102 = "RSE102"
    RUF = "RUF"
    RUF0 = "RUF0"
    RUF00 = "RUF00"
    RUF001 = "RUF001"
    RUF002 = "RUF002"
    RUF003 = "RUF003"
    RUF005 = "RUF005"
    RUF006 = "RUF006"
    RUF007 = "RUF007"
    RUF008 = "RUF008"
    RUF009 = "RUF009"
    RUF01 = "RUF01"
    RUF010 = "RUF010"
    RUF012 = "RUF012"
    RUF013 = "RUF013"
    RUF015 = "RUF015"
    RUF016 = "RUF016"
    RUF017 = "RUF017"
    RUF018 = "RUF018"
    RUF019 = "RUF019"
    RUF02 = "RUF02"
    RUF020 = "RUF020"
    RUF021 = "RUF021"
    RUF022 = "RUF022"
    RUF023 = "RUF023"
    RUF024 = "RUF024"
    RUF026 = "RUF026"
    RUF027 = "RUF027"
    RUF028 = "RUF028"
    RUF029 = "RUF029"
    RUF03 = "RUF03"
    RUF030 = "RUF030"
    RUF031 = "RUF031"
    RUF032 = "RUF032"
    RUF033 = "RUF033"
    RUF034 = "RUF034"
    RUF036 = "RUF036"
    RUF037 = "RUF037"
    RUF038 = "RUF038"
    RUF039 = "RUF039"
    RUF04 = "RUF04"
    RUF040 = "RUF040"
    RUF041 = "RUF041"
    RUF043 = "RUF043"
    RUF045 = "RUF045"
    RUF046 = "RUF046"
    RUF047 = "RUF047"
    RUF048 = "RUF048"
    RUF049 = "RUF049"
    RUF05 = "RUF05"
    RUF051 = "RUF051"
    RUF052 = "RUF052"
    RUF053 = "RUF053"
    RUF054 = "RUF054"
    RUF055 = "RUF055"
    RUF056 = "RUF056"
    RUF057 = "RUF057"
    RUF058 = "RUF058"
    RUF059 = "RUF059"
    RUF06 = "RUF06"
    RUF060 = "RUF060"
    RUF061 = "RUF061"
    RUF063 = "RUF063"
    RUF064 = "RUF064"
    RUF065 = "RUF065"
    RUF1 = "RUF1"
    RUF10 = "RUF10"
    RUF100 = "RUF100"
    RUF101 = "RUF101"
    RUF102 = "RUF102"
    RUF2 = "RUF2"
    RUF20 = "RUF20"
    RUF200 = "RUF200"
    S = "S"
    S1 = "S1"
    S10 = "S10"
    S101 = "S101"
    S102 = "S102"
    S103 = "S103"
    S104 = "S104"
    S105 = "S105"
    S106 = "S106"
    S107 = "S107"
    S108 = "S108"
    S11 = "S11"
    S110 = "S110"
    S112 = "S112"
    S113 = "S113"
    S2 = "S2"
    S20 = "S20"
    S201 = "S201"
    S202 = "S202"
    S3 = "S3"
    S30 = "S30"
    S301 = "S301"
    S302 = "S302"
    S303 = "S303"
    S304 = "S304"
    S305 = "S305"
    S306 = "S306"
    S307 = "S307"
    S308 = "S308"
    S31 = "S31"
    S310 = "S310"
    S311 = "S311"
    S312 = "S312"
    S313 = "S313"
    S314 = "S314"
    S315 = "S315"
    S316 = "S316"
    S317 = "S317"
    S318 = "S318"
    S319 = "S319"
    S32 = "S32"
    S321 = "S321"
    S323 = "S323"
    S324 = "S324"
    S4 = "S4"
    S40 = "S40"
    S401 = "S401"
    S402 = "S402"
    S403 = "S403"
    S404 = "S404"
    S405 = "S405"
    S406 = "S406"
    S407 = "S407"
    S408 = "S408"
    S409 = "S409"
    S41 = "S41"
    S411 = "S411"
    S412 = "S412"
    S413 = "S413"
    S415 = "S415"
    S5 = "S5"
    S50 = "S50"
    S501 = "S501"
    S502 = "S502"
    S503 = "S503"
    S504 = "S504"
    S505 = "S505"
    S506 = "S506"
    S507 = "S507"
    S508 = "S508"
    S509 = "S509"
    S6 = "S6"
    S60 = "S60"
    S601 = "S601"
    S602 = "S602"
    S603 = "S603"
    S604 = "S604"
    S605 = "S605"
    S606 = "S606"
    S607 = "S607"
    S608 = "S608"
    S609 = "S609"
    S61 = "S61"
    S610 = "S610"
    S611 = "S611"
    S612 = "S612"
    S7 = "S7"
    S70 = "S70"
    S701 = "S701"
    S702 = "S702"
    S704 = "S704"
    SIM = "SIM"
    SIM1 = "SIM1"
    SIM10 = "SIM10"
    SIM101 = "SIM101"
    SIM102 = "SIM102"
    SIM103 = "SIM103"
    SIM105 = "SIM105"
    SIM107 = "SIM107"
    SIM108 = "SIM108"
    SIM109 = "SIM109"
    SIM11 = "SIM11"
    SIM110 = "SIM110"
    SIM112 = "SIM112"
    SIM113 = "SIM113"
    SIM114 = "SIM114"
    SIM115 = "SIM115"
    SIM116 = "SIM116"
    SIM117 = "SIM117"
    SIM118 = "SIM118"
    SIM2 = "SIM2"
    SIM20 = "SIM20"
    SIM201 = "SIM201"
    SIM202 = "SIM202"
    SIM208 = "SIM208"
    SIM21 = "SIM21"
    SIM210 = "SIM210"
    SIM211 = "SIM211"
    SIM212 = "SIM212"
    SIM22 = "SIM22"
    SIM220 = "SIM220"
    SIM221 = "SIM221"
    SIM222 = "SIM222"
    SIM223 = "SIM223"
    SIM3 = "SIM3"
    SIM30 = "SIM30"
    SIM300 = "SIM300"
    SIM4 = "SIM4"
    SIM40 = "SIM40"
    SIM401 = "SIM401"
    SIM9 = "SIM9"
    SIM90 = "SIM90"
    SIM905 = "SIM905"
    SIM91 = "SIM91"
    SIM910 = "SIM910"
    SIM911 = "SIM911"
    SLF = "SLF"
    SLF0 = "SLF0"
    SLF00 = "SLF00"
    SLF001 = "SLF001"
    SLOT = "SLOT"
    SLOT0 = "SLOT0"
    SLOT00 = "SLOT00"
    SLOT000 = "SLOT000"
    SLOT001 = "SLOT001"
    SLOT002 = "SLOT002"
    T = "T"
    T1 = "T1"
    T10 = "T10"
    T100 = "T100"
    T2 = "T2"
    T20 = "T20"
    T201 = "T201"
    T203 = "T203"
    TC = "TC"
    TC0 = "TC0"
    TC00 = "TC00"
    TC001 = "TC001"
    TC002 = "TC002"
    TC003 = "TC003"
    TC004 = "TC004"
    TC005 = "TC005"
    TC006 = "TC006"
    TC007 = "TC007"
    TC008 = "TC008"
    TC01 = "TC01"
    TC010 = "TC010"
    TD = "TD"
    TD0 = "TD0"
    TD00 = "TD00"
    TD001 = "TD001"
    TD002 = "TD002"
    TD003 = "TD003"
    TD004 = "TD004"
    TD005 = "TD005"
    TD006 = "TD006"
    TD007 = "TD007"
    TID = "TID"
    TID2 = "TID2"
    TID25 = "TID25"
    TID251 = "TID251"
    TID252 = "TID252"
    TID253 = "TID253"
    TRY = "TRY"
    TRY0 = "TRY0"
    TRY00 = "TRY00"
    TRY002 = "TRY002"
    TRY003 = "TRY003"
    TRY004 = "TRY004"
    TRY2 = "TRY2"
    TRY20 = "TRY20"
    TRY201 = "TRY201"
    TRY203 = "TRY203"
    TRY3 = "TRY3"
    TRY30 = "TRY30"
    TRY300 = "TRY300"
    TRY301 = "TRY301"
    TRY4 = "TRY4"
    TRY40 = "TRY40"
    TRY400 = "TRY400"
    TRY401 = "TRY401"
    UP = "UP"
    UP0 = "UP0"
    UP00 = "UP00"
    UP001 = "UP001"
    UP003 = "UP003"
    UP004 = "UP004"
    UP005 = "UP005"
    UP006 = "UP006"
    UP007 = "UP007"
    UP008 = "UP008"
    UP009 = "UP009"
    UP01 = "UP01"
    UP010 = "UP010"
    UP011 = "UP011"
    UP012 = "UP012"
    UP013 = "UP013"
    UP014 = "UP014"
    UP015 = "UP015"
    UP017 = "UP017"
    UP018 = "UP018"
    UP019 = "UP019"
    UP02 = "UP02"
    UP020 = "UP020"
    UP021 = "UP021"
    UP022 = "UP022"
    UP023 = "UP023"
    UP024 = "UP024"
    UP025 = "UP025"
    UP026 = "UP026"
    UP028 = "UP028"
    UP029 = "UP029"
    UP03 = "UP03"
    UP030 = "UP030"
    UP031 = "UP031"
    UP032 = "UP032"
    UP033 = "UP033"
    UP034 = "UP034"
    UP035 = "UP035"
    UP036 = "UP036"
    UP037 = "UP037"
    UP039 = "UP039"
    UP04 = "UP04"
    UP040 = "UP040"
    UP041 = "UP041"
    UP042 = "UP042"
    UP043 = "UP043"
    UP044 = "UP044"
    UP045 = "UP045"
    UP046 = "UP046"
    UP047 = "UP047"
    UP049 = "UP049"
    UP05 = "UP05"
    UP050 = "UP050"
    W = "W"
    W1 = "W1"
    W19 = "W19"
    W191 = "W191"
    W2 = "W2"
    W29 = "W29"
    W291 = "W291"
    W292 = "W292"
    W293 = "W293"
    W3 = "W3"
    W39 = "W39"
    W391 = "W391"
    W5 = "W5"
    W50 = "W50"
    W505 = "W505"
    W6 = "W6"
    W60 = "W60"
    W605 = "W605"
    YTT = "YTT"
    YTT1 = "YTT1"
    YTT10 = "YTT10"
    YTT101 = "YTT101"
    YTT102 = "YTT102"
    YTT103 = "YTT103"
    YTT2 = "YTT2"
    YTT20 = "YTT20"
    YTT201 = "YTT201"
    YTT202 = "YTT202"
    YTT203 = "YTT203"
    YTT204 = "YTT204"
    YTT3 = "YTT3"
    YTT30 = "YTT30"
    YTT301 = "YTT301"
    YTT302 = "YTT302"
    YTT303 = "YTT303"


class Strictness1(Enum):
    parents = "parents"


class Strictness2(Enum):
    all = "all"


class Strictness(BaseModel):
    __root__: Union[Strictness1, Strictness2]


class AnalyzeOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    detect_string_imports: Optional[bool] = Field(
        None,
        alias="detect-string-imports",
        description='Whether to detect imports from string literals. When enabled, Ruff will search for string literals that "look like" import paths, and include them in the import map, if they resolve to valid Python modules.',
    )
    direction: Optional[Direction] = Field(
        None,
        description="Whether to generate a map from file to files that it depends on (dependencies) or files that depend on it (dependents).",
    )
    exclude: Optional[List[str]] = Field(
        None,
        description="A list of file patterns to exclude from analysis in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    include_dependencies: Optional[Dict[str, Any]] = Field(
        None,
        alias="include-dependencies",
        description="A map from file path to the list of Python or non-Python file paths or globs that should be considered dependencies of that file, regardless of whether relevant imports are detected.",
    )
    preview: Optional[bool] = Field(
        None,
        description="Whether to enable preview mode. When preview mode is enabled, Ruff will expose unstable commands.",
    )
    string_imports_min_dots: Optional[conint(ge=0)] = Field(
        None,
        alias="string-imports-min-dots",
        description='The minimum number of dots in a string to consider it a valid import.\n\nThis setting is only relevant when [`detect-string-imports`](#detect-string-imports) is enabled. For example, if this is set to `2`, then only strings with at least two dots (e.g., `"path.to.module"`) would be considered valid imports.',
    )


class DocstringCodeLineWidth(BaseModel):
    __root__: Union[LineWidth, str]


class Flake8PytestStyleOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    fixture_parentheses: Optional[bool] = Field(
        None,
        alias="fixture-parentheses",
        description="Boolean flag specifying whether `@pytest.fixture()` without parameters should have parentheses. If the option is set to `false` (the default), `@pytest.fixture` is valid and `@pytest.fixture()` is invalid. If set to `true`, `@pytest.fixture()` is valid and `@pytest.fixture` is invalid.",
    )
    mark_parentheses: Optional[bool] = Field(
        None,
        alias="mark-parentheses",
        description="Boolean flag specifying whether `@pytest.mark.foo()` without parameters should have parentheses. If the option is set to `false` (the default), `@pytest.mark.foo` is valid and `@pytest.mark.foo()` is invalid. If set to `true`, `@pytest.mark.foo()` is valid and `@pytest.mark.foo` is invalid.",
    )
    parametrize_names_type: Optional[ParametrizeNameType] = Field(
        None,
        alias="parametrize-names-type",
        description='Expected type for multiple argument names in `@pytest.mark.parametrize`. The following values are supported:\n\n- `csv` â a comma-separated list, e.g. `@pytest.mark.parametrize("name1,name2", ...)` - `tuple` (default) â e.g. `@pytest.mark.parametrize(("name1", "name2"), ...)` - `list` â e.g. `@pytest.mark.parametrize(["name1", "name2"], ...)`',
    )
    parametrize_values_row_type: Optional[ParametrizeValuesRowType] = Field(
        None,
        alias="parametrize-values-row-type",
        description='Expected type for each row of values in `@pytest.mark.parametrize` in case of multiple parameters. The following values are supported:\n\n- `tuple` (default) â e.g. `@pytest.mark.parametrize(("name1", "name2"), [(1, 2), (3, 4)])` - `list` â e.g. `@pytest.mark.parametrize(("name1", "name2"), [[1, 2], [3, 4]])`',
    )
    parametrize_values_type: Optional[ParametrizeValuesType] = Field(
        None,
        alias="parametrize-values-type",
        description='Expected type for the list of values rows in `@pytest.mark.parametrize`. The following values are supported:\n\n- `tuple` â e.g. `@pytest.mark.parametrize("name", (1, 2, 3))` - `list` (default) â e.g. `@pytest.mark.parametrize("name", [1, 2, 3])`',
    )
    raises_extend_require_match_for: Optional[List[str]] = Field(
        None,
        alias="raises-extend-require-match-for",
        description="List of additional exception names that require a match= parameter in a `pytest.raises()` call. This extends the default list of exceptions that require a match= parameter. This option is useful if you want to extend the default list of exceptions that require a match= parameter without having to specify the entire list. Note that this option does not remove any exceptions from the default list.\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    raises_require_match_for: Optional[List[str]] = Field(
        None,
        alias="raises-require-match-for",
        description="List of exception names that require a match= parameter in a `pytest.raises()` call.\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    warns_extend_require_match_for: Optional[List[str]] = Field(
        None,
        alias="warns-extend-require-match-for",
        description="List of additional warning names that require a match= parameter in a `pytest.warns()` call. This extends the default list of warnings that require a match= parameter.\n\nThis option is useful if you want to extend the default list of warnings that require a match= parameter without having to specify the entire list.\n\nNote that this option does not remove any warnings from the default list.\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    warns_require_match_for: Optional[List[str]] = Field(
        None,
        alias="warns-require-match-for",
        description="List of warning names that require a match= parameter in a `pytest.warns()` call.\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )


class Flake8QuotesOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    avoid_escape: Optional[bool] = Field(
        None,
        alias="avoid-escape",
        description="Whether to avoid using single quotes if a string contains single quotes, or vice-versa with double quotes, as per [PEP 8](https://peps.python.org/pep-0008/#string-quotes). This minimizes the need to escape quotation marks within strings.",
    )
    docstring_quotes: Optional[Quote] = Field(
        None,
        alias="docstring-quotes",
        description='Quote style to prefer for docstrings (either "single" or "double").\n\nWhen using the formatter, only "double" is compatible, as the formatter enforces double quotes for docstrings strings.',
    )
    inline_quotes: Optional[Quote] = Field(
        None,
        alias="inline-quotes",
        description='Quote style to prefer for inline strings (either "single" or "double").\n\nWhen using the formatter, ensure that [`format.quote-style`](#format_quote-style) is set to the same preferred quote style.',
    )
    multiline_quotes: Optional[Quote] = Field(
        None,
        alias="multiline-quotes",
        description='Quote style to prefer for multiline strings (either "single" or "double").\n\nWhen using the formatter, only "double" is compatible, as the formatter enforces double quotes for multiline strings.',
    )


class Flake8TidyImportsOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    ban_relative_imports: Optional[Strictness] = Field(
        None,
        alias="ban-relative-imports",
        description='Whether to ban all relative imports (`"all"`), or only those imports that extend into the parent module or beyond (`"parents"`).',
    )
    banned_api: Optional[Dict[str, Any]] = Field(
        None,
        alias="banned-api",
        description="Specific modules or module members that may not be imported or accessed. Note that this rule is only meant to flag accidental uses, and can be circumvented via `eval` or `importlib`.",
    )
    banned_module_level_imports: Optional[List[str]] = Field(
        None,
        alias="banned-module-level-imports",
        description="List of specific modules that may not be imported at module level, and should instead be imported lazily (e.g., within a function definition, or an `if TYPE_CHECKING:` block, or some other nested context). This also affects the rule `import-outside-top-level` if `banned-module-level-imports` is enabled.",
    )


class FormatOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    docstring_code_format: Optional[bool] = Field(
        None,
        alias="docstring-code-format",
        description='Whether to format code snippets in docstrings.\n\nWhen this is enabled, Python code examples within docstrings are automatically reformatted.\n\nFor example, when this is enabled, the following code:\n\n```python def f(x): """ Something about `f`. And an example in doctest format:\n\n>>> f(  x  )\n\nMarkdown is also supported:\n\n```py f(  x  ) ```\n\nAs are reStructuredText literal blocks::\n\nf(  x  )\n\nAnd reStructuredText code blocks:\n\n.. code-block:: python\n\nf(  x  ) """ pass ```\n\n... will be reformatted (assuming the rest of the options are set to their defaults) as:\n\n```python def f(x): """ Something about `f`. And an example in doctest format:\n\n>>> f(x)\n\nMarkdown is also supported:\n\n```py f(x) ```\n\nAs are reStructuredText literal blocks::\n\nf(x)\n\nAnd reStructuredText code blocks:\n\n.. code-block:: python\n\nf(x) """ pass ```\n\nIf a code snippet in a docstring contains invalid Python code or if the formatter would otherwise write invalid Python code, then the code example is ignored by the formatter and kept as-is.\n\nCurrently, doctest, Markdown, reStructuredText literal blocks, and reStructuredText code blocks are all supported and automatically recognized. In the case of unlabeled fenced code blocks in Markdown and reStructuredText literal blocks, the contents are assumed to be Python and reformatted. As with any other format, if the contents aren\'t valid Python, then the block is left untouched automatically.',
    )
    docstring_code_line_length: Optional[DocstringCodeLineWidth] = Field(
        None,
        alias="docstring-code-line-length",
        description='Set the line length used when formatting code snippets in docstrings.\n\nThis only has an effect when the `docstring-code-format` setting is enabled.\n\nThe default value for this setting is `"dynamic"`, which has the effect of ensuring that any reformatted code examples in docstrings adhere to the global line length configuration that is used for the surrounding Python code. The point of this setting is that it takes the indentation of the docstring into account when reformatting code examples.\n\nAlternatively, this can be set to a fixed integer, which will result in the same line length limit being applied to all reformatted code examples in docstrings. When set to a fixed integer, the indent of the docstring is not taken into account. That is, this may result in lines in the reformatted code example that exceed the globally configured line length limit.\n\nFor example, when this is set to `20` and [`docstring-code-format`](#docstring-code-format) is enabled, then this code:\n\n```python def f(x): \'\'\' Something about `f`. And an example:\n\n.. code-block:: python\n\nfoo, bar, quux = this_is_a_long_line(lion, hippo, lemur, bear) \'\'\' pass ```\n\n... will be reformatted (assuming the rest of the options are set to their defaults) as:\n\n```python def f(x): """ Something about `f`. And an example:\n\n.. code-block:: python\n\n( foo, bar, quux, ) = this_is_a_long_line( lion, hippo, lemur, bear, ) """ pass ```',
    )
    exclude: Optional[List[str]] = Field(
        None,
        description="A list of file patterns to exclude from formatting in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    indent_style: Optional[IndentStyle] = Field(
        None,
        alias="indent-style",
        description='Whether to use spaces or tabs for indentation.\n\n`indent-style = "space"` (default):\n\n```python def f(): print("Hello") #  Spaces indent the `print` statement. ```\n\n`indent-style = "tab"`:\n\n```python def f(): print("Hello") #  A tab `\\t` indents the `print` statement. ```\n\nPEP 8 recommends using spaces for [indentation](https://peps.python.org/pep-0008/#indentation). We care about accessibility; if you do not need tabs for accessibility, we do not recommend you use them.\n\nSee [`indent-width`](#indent-width) to configure the number of spaces per indentation and the tab width.',
    )
    line_ending: Optional[LineEnding] = Field(
        None,
        alias="line-ending",
        description="The character Ruff uses at the end of a line.\n\n* `auto`: The newline style is detected automatically on a file per file basis. Files with mixed line endings will be converted to the first detected line ending. Defaults to `\\n` for files that contain no line endings. * `lf`: Line endings will be converted to `\\n`. The default line ending on Unix. * `cr-lf`: Line endings will be converted to `\\r\\n`. The default line ending on Windows. * `native`: Line endings will be converted to `\\n` on Unix and `\\r\\n` on Windows.",
    )
    preview: Optional[bool] = Field(None, description="Whether to enable the unstable preview style formatting.")
    quote_style: Optional[QuoteStyle] = Field(
        None,
        alias="quote-style",
        description='Configures the preferred quote character for strings. The recommended options are\n\n* `double` (default): Use double quotes `"` * `single`: Use single quotes `\'`\n\nIn compliance with [PEP 8](https://peps.python.org/pep-0008/) and [PEP 257](https://peps.python.org/pep-0257/), Ruff prefers double quotes for triple quoted strings and docstrings even when using `quote-style = "single"`.\n\nRuff deviates from using the configured quotes if doing so prevents the need for escaping quote characters inside the string:\n\n```python a = "a string without any quotes" b = "It\'s monday morning" ```\n\nRuff will change the quotes of the string assigned to `a` to single quotes when using `quote-style = "single"`. However, Ruff uses double quotes for the string assigned to `b` because using single quotes would require escaping the `\'`, which leads to the less readable code: `\'It\\\'s monday morning\'`.\n\nIn addition, Ruff supports the quote style `preserve` for projects that already use a mixture of single and double quotes and can\'t migrate to the `double` or `single` style. The quote style `preserve` leaves the quotes of all strings unchanged.',
    )
    skip_magic_trailing_comma: Optional[bool] = Field(
        None,
        alias="skip-magic-trailing-comma",
        description="Ruff uses existing trailing commas as an indication that short lines should be left separate. If this option is set to `true`, the magic trailing comma is ignored.\n\nFor example, Ruff leaves the arguments separate even though collapsing the arguments to a single line doesn't exceed the line length if `skip-magic-trailing-comma = false`:\n\n```python # The arguments remain on separate lines because of the trailing comma after `b` def test( a, b, ): pass ```\n\nSetting `skip-magic-trailing-comma = true` changes the formatting to:\n\n```python # The arguments are collapsed to a single line because the trailing comma is ignored def test(a, b): pass ```",
    )


class ImportSection(BaseModel):
    __root__: Union[ImportType, str]


class IsortOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    case_sensitive: Optional[bool] = Field(
        None,
        alias="case-sensitive",
        description="Sort imports taking into account case sensitivity.",
    )
    classes: Optional[List[str]] = Field(
        None,
        description="An override list of tokens to always recognize as a Class for [`order-by-type`](#lint_isort_order-by-type) regardless of casing.",
    )
    combine_as_imports: Optional[bool] = Field(
        None,
        alias="combine-as-imports",
        description="Combines as imports on the same line. See isort's [`combine-as-imports`](https://pycqa.github.io/isort/docs/configuration/options.html#combine-as-imports) option.",
    )
    constants: Optional[List[str]] = Field(
        None,
        description="An override list of tokens to always recognize as a CONSTANT for [`order-by-type`](#lint_isort_order-by-type) regardless of casing.",
    )
    default_section: Optional[ImportSection] = Field(
        None,
        alias="default-section",
        description="Define a default section for any imports that don't fit into the specified [`section-order`](#lint_isort_section-order).",
    )
    detect_same_package: Optional[bool] = Field(
        None,
        alias="detect-same-package",
        description="Whether to automatically mark imports from within the same package as first-party. For example, when `detect-same-package = true`, then when analyzing files within the `foo` package, any imports from within the `foo` package will be considered first-party.\n\nThis heuristic is often unnecessary when `src` is configured to detect all first-party sources; however, if `src` is _not_ configured, this heuristic can be useful to detect first-party imports from _within_ (but not _across_) first-party packages.",
    )
    extra_standard_library: Optional[List[str]] = Field(
        None,
        alias="extra-standard-library",
        description="A list of modules to consider standard-library, in addition to those known to Ruff in advance.\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    force_single_line: Optional[bool] = Field(
        None,
        alias="force-single-line",
        description="Forces all from imports to appear on their own line.",
    )
    force_sort_within_sections: Optional[bool] = Field(
        None,
        alias="force-sort-within-sections",
        description="Don't sort straight-style imports (like `import sys`) before from-style imports (like `from itertools import groupby`). Instead, sort the imports by module, independent of import style.",
    )
    force_to_top: Optional[List[str]] = Field(
        None,
        alias="force-to-top",
        description="Force specific imports to the top of their appropriate section.",
    )
    force_wrap_aliases: Optional[bool] = Field(
        None,
        alias="force-wrap-aliases",
        description="Force `import from` statements with multiple members and at least one alias (e.g., `import A as B`) to wrap such that every line contains exactly one member. For example, this formatting would be retained, rather than condensing to a single line:\n\n```python from .utils import ( test_directory as test_directory, test_id as test_id ) ```\n\nNote that this setting is only effective when combined with `combine-as-imports = true`. When [`combine-as-imports`](#lint_isort_combine-as-imports) isn't enabled, every aliased `import from` will be given its own line, in which case, wrapping is not necessary.\n\nWhen using the formatter, ensure that [`format.skip-magic-trailing-comma`](#format_skip-magic-trailing-comma) is set to `false` (default) when enabling `force-wrap-aliases` to avoid that the formatter collapses members if they all fit on a single line.",
    )
    forced_separate: Optional[List[str]] = Field(
        None,
        alias="forced-separate",
        description="A list of modules to separate into auxiliary block(s) of imports, in the order specified.",
    )
    from_first: Optional[bool] = Field(
        None,
        alias="from-first",
        description="Whether to place `import from` imports before straight imports when sorting.\n\nFor example, by default, imports will be sorted such that straight imports appear before `import from` imports, as in: ```python import os import sys from typing import List ```\n\nSetting `from-first = true` will instead sort such that `import from` imports appear before straight imports, as in: ```python from typing import List import os import sys ```",
    )
    known_first_party: Optional[List[str]] = Field(
        None,
        alias="known-first-party",
        description="A list of modules to consider first-party, regardless of whether they can be identified as such via introspection of the local filesystem.\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    known_local_folder: Optional[List[str]] = Field(
        None,
        alias="known-local-folder",
        description="A list of modules to consider being a local folder. Generally, this is reserved for relative imports (`from . import module`).\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    known_third_party: Optional[List[str]] = Field(
        None,
        alias="known-third-party",
        description="A list of modules to consider third-party, regardless of whether they can be identified as such via introspection of the local filesystem.\n\nSupports glob patterns. For more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    length_sort: Optional[bool] = Field(
        None,
        alias="length-sort",
        description="Sort imports by their string length, such that shorter imports appear before longer imports. For example, by default, imports will be sorted alphabetically, as in: ```python import collections import os ```\n\nSetting `length-sort = true` will instead sort such that shorter imports appear before longer imports, as in: ```python import os import collections ```",
    )
    length_sort_straight: Optional[bool] = Field(
        None,
        alias="length-sort-straight",
        description="Sort straight imports by their string length. Similar to [`length-sort`](#lint_isort_length-sort), but applies only to straight imports and doesn't affect `from` imports.",
    )
    lines_after_imports: Optional[int] = Field(
        None,
        alias="lines-after-imports",
        description="The number of blank lines to place after imports. Use `-1` for automatic determination.\n\nRuff uses at most one blank line after imports in typing stub files (files with `.pyi` extension) in accordance to the typing style recommendations ([source](https://typing.python.org/en/latest/guides/writing_stubs.html#blank-lines)).\n\nWhen using the formatter, only the values `-1`, `1`, and `2` are compatible because it enforces at least one empty and at most two empty lines after imports.",
    )
    lines_between_types: Optional[conint(ge=0)] = Field(
        None,
        alias="lines-between-types",
        description='The number of lines to place between "direct" and `import from` imports.\n\nWhen using the formatter, only the values `0` and `1` are compatible because it preserves up to one empty line after imports in nested blocks.',
    )
    no_lines_before: Optional[List[ImportSection]] = Field(
        None,
        alias="no-lines-before",
        description="A list of sections that should _not_ be delineated from the previous section via empty lines.",
    )
    no_sections: Optional[bool] = Field(
        None,
        alias="no-sections",
        description="Put all imports into the same section bucket.\n\nFor example, rather than separating standard library and third-party imports, as in: ```python import os import sys\n\nimport numpy import pandas ```\n\nSetting `no-sections = true` will instead group all imports into a single section: ```python import numpy import os import pandas import sys ```",
    )
    order_by_type: Optional[bool] = Field(
        None,
        alias="order-by-type",
        description="Order imports by type, which is determined by case, in addition to alphabetically.",
    )
    relative_imports_order: Optional[RelativeImportsOrder] = Field(
        None,
        alias="relative-imports-order",
        description='Whether to place "closer" imports (fewer `.` characters, most local) before "further" imports (more `.` characters, least local), or vice versa.\n\nThe default ("furthest-to-closest") is equivalent to isort\'s [`reverse-relative`](https://pycqa.github.io/isort/docs/configuration/options.html#reverse-relative) default (`reverse-relative = false`); setting this to "closest-to-furthest" is equivalent to isort\'s `reverse-relative = true`.',
    )
    required_imports: Optional[List[NameImports]] = Field(
        None,
        alias="required-imports",
        description="Add the specified import line to all files.",
    )
    section_order: Optional[List[ImportSection]] = Field(
        None,
        alias="section-order",
        description="Override in which order the sections should be output. Can be used to move custom sections.",
    )
    sections: Optional[Dict[str, Any]] = Field(
        None,
        description='A list of mappings from section names to modules.\n\nBy default, imports are categorized according to their type (e.g., `future`, `third-party`, and so on). This setting allows you to group modules into custom sections, to augment or override the built-in sections.\n\nFor example, to group all testing utilities, you could create a `testing` section: ```toml testing = ["pytest", "hypothesis"] ```\n\nThe values in the list are treated as glob patterns. For example, to match all packages in the LangChain ecosystem (`langchain-core`, `langchain-openai`, etc.): ```toml langchain = ["langchain-*"] ```\n\nCustom sections should typically be inserted into the [`section-order`](#lint_isort_section-order) list to ensure that they\'re displayed as a standalone group and in the intended order, as in: ```toml section-order = [ "future", "standard-library", "third-party", "first-party", "local-folder", "testing" ] ```\n\nIf a custom section is omitted from [`section-order`](#lint_isort_section-order), imports in that section will be assigned to the [`default-section`](#lint_isort_default-section) (which defaults to `third-party`).',
    )
    single_line_exclusions: Optional[List[str]] = Field(
        None,
        alias="single-line-exclusions",
        description="One or more modules to exclude from the single line rule.",
    )
    split_on_trailing_comma: Optional[bool] = Field(
        None,
        alias="split-on-trailing-comma",
        description="If a comma is placed after the last member in a multi-line import, then the imports will never be folded into one line.\n\nSee isort's [`split-on-trailing-comma`](https://pycqa.github.io/isort/docs/configuration/options.html#split-on-trailing-comma) option.\n\nWhen using the formatter, ensure that [`format.skip-magic-trailing-comma`](#format_skip-magic-trailing-comma) is set to `false` (default) when enabling `split-on-trailing-comma` to avoid that the formatter removes the trailing commas.",
    )
    variables: Optional[List[str]] = Field(
        None,
        description="An override list of tokens to always recognize as a var for [`order-by-type`](#lint_isort_order-by-type) regardless of casing.",
    )


class LintOptions(BaseModel):
    class Config:
        extra = Extra.forbid

    allowed_confusables: Optional[List[constr(min_length=1, max_length=1)]] = Field(
        None,
        alias="allowed-confusables",
        description='A list of allowed "confusable" Unicode characters to ignore when enforcing `RUF001`, `RUF002`, and `RUF003`.',
    )
    dummy_variable_rgx: Optional[str] = Field(
        None,
        alias="dummy-variable-rgx",
        description='A regular expression used to identify "dummy" variables, or those which should be ignored when enforcing (e.g.) unused-variable rules. The default expression matches `_`, `__`, and `_var`, but not `_var_`.',
    )
    exclude: Optional[List[str]] = Field(
        None,
        description="A list of file patterns to exclude from linting in addition to the files excluded globally (see [`exclude`](#exclude), and [`extend-exclude`](#extend-exclude)).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    explicit_preview_rules: Optional[bool] = Field(
        None,
        alias="explicit-preview-rules",
        description="Whether to require exact codes to select preview rules. When enabled, preview rules will not be selected by prefixes â the full code of each preview rule will be required to enable the rule.",
    )
    extend_fixable: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-fixable",
        description="A list of rule codes or prefixes to consider fixable, in addition to those specified by [`fixable`](#lint_fixable).",
    )
    extend_ignore: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-ignore",
        description="A list of rule codes or prefixes to ignore, in addition to those specified by `ignore`.",
    )
    extend_per_file_ignores: Optional[Dict[str, Any]] = Field(
        None,
        alias="extend-per-file-ignores",
        description="A list of mappings from file pattern to rule codes or prefixes to exclude, in addition to any rules excluded by [`per-file-ignores`](#lint_per-file-ignores).",
    )
    extend_safe_fixes: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-safe-fixes",
        description="A list of rule codes or prefixes for which unsafe fixes should be considered safe.",
    )
    extend_select: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-select",
        description="A list of rule codes or prefixes to enable, in addition to those specified by [`select`](#lint_select).",
    )
    extend_unfixable: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-unfixable",
        description="A list of rule codes or prefixes to consider non-auto-fixable, in addition to those specified by [`unfixable`](#lint_unfixable).",
    )
    extend_unsafe_fixes: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-unsafe-fixes",
        description="A list of rule codes or prefixes for which safe fixes should be considered unsafe.",
    )
    external: Optional[List[str]] = Field(
        None,
        description="A list of rule codes or prefixes that are unsupported by Ruff, but should be preserved when (e.g.) validating `# noqa` directives. Useful for retaining `# noqa` directives that cover plugins not yet implemented by Ruff.",
    )
    fixable: Optional[List[RuleSelector]] = Field(
        None,
        description="A list of rule codes or prefixes to consider fixable. By default, all rules are considered fixable.",
    )
    flake8_annotations: Optional[Flake8AnnotationsOptions] = Field(
        None,
        alias="flake8-annotations",
        description="Options for the `flake8-annotations` plugin.",
    )
    flake8_bandit: Optional[Flake8BanditOptions] = Field(
        None,
        alias="flake8-bandit",
        description="Options for the `flake8-bandit` plugin.",
    )
    flake8_boolean_trap: Optional[Flake8BooleanTrapOptions] = Field(
        None,
        alias="flake8-boolean-trap",
        description="Options for the `flake8-boolean-trap` plugin.",
    )
    flake8_bugbear: Optional[Flake8BugbearOptions] = Field(
        None,
        alias="flake8-bugbear",
        description="Options for the `flake8-bugbear` plugin.",
    )
    flake8_builtins: Optional[Flake8BuiltinsOptions] = Field(
        None,
        alias="flake8-builtins",
        description="Options for the `flake8-builtins` plugin.",
    )
    flake8_comprehensions: Optional[Flake8ComprehensionsOptions] = Field(
        None,
        alias="flake8-comprehensions",
        description="Options for the `flake8-comprehensions` plugin.",
    )
    flake8_copyright: Optional[Flake8CopyrightOptions] = Field(
        None,
        alias="flake8-copyright",
        description="Options for the `flake8-copyright` plugin.",
    )
    flake8_errmsg: Optional[Flake8ErrMsgOptions] = Field(
        None,
        alias="flake8-errmsg",
        description="Options for the `flake8-errmsg` plugin.",
    )
    flake8_gettext: Optional[Flake8GetTextOptions] = Field(
        None,
        alias="flake8-gettext",
        description="Options for the `flake8-gettext` plugin.",
    )
    flake8_implicit_str_concat: Optional[Flake8ImplicitStrConcatOptions] = Field(
        None,
        alias="flake8-implicit-str-concat",
        description="Options for the `flake8-implicit-str-concat` plugin.",
    )
    flake8_import_conventions: Optional[Flake8ImportConventionsOptions] = Field(
        None,
        alias="flake8-import-conventions",
        description="Options for the `flake8-import-conventions` plugin.",
    )
    flake8_pytest_style: Optional[Flake8PytestStyleOptions] = Field(
        None,
        alias="flake8-pytest-style",
        description="Options for the `flake8-pytest-style` plugin.",
    )
    flake8_quotes: Optional[Flake8QuotesOptions] = Field(
        None,
        alias="flake8-quotes",
        description="Options for the `flake8-quotes` plugin.",
    )
    flake8_self: Optional[Flake8SelfOptions] = Field(None, alias="flake8-self", description="Options for the `flake8_self` plugin.")
    flake8_tidy_imports: Optional[Flake8TidyImportsOptions] = Field(
        None,
        alias="flake8-tidy-imports",
        description="Options for the `flake8-tidy-imports` plugin.",
    )
    flake8_type_checking: Optional[Flake8TypeCheckingOptions] = Field(
        None,
        alias="flake8-type-checking",
        description="Options for the `flake8-type-checking` plugin.",
    )
    flake8_unused_arguments: Optional[Flake8UnusedArgumentsOptions] = Field(
        None,
        alias="flake8-unused-arguments",
        description="Options for the `flake8-unused-arguments` plugin.",
    )
    future_annotations: Optional[bool] = Field(
        None,
        alias="future-annotations",
        description="Whether to allow rules to add `from __future__ import annotations` in cases where this would simplify a fix or enable a new diagnostic.\n\nFor example, `TC001`, `TC002`, and `TC003` can move more imports into `TYPE_CHECKING` blocks if `__future__` annotations are enabled.",
    )
    ignore: Optional[List[RuleSelector]] = Field(
        None,
        description="A list of rule codes or prefixes to ignore. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\n\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes. `ignore` takes precedence over `select` if the same prefix appears in both.",
    )
    ignore_init_module_imports: Optional[bool] = Field(
        None,
        alias="ignore-init-module-imports",
        description="Avoid automatically removing unused imports in `__init__.py` files. Such imports will still be flagged, but with a dedicated message suggesting that the import is either added to the module's `__all__` symbol, or re-exported with a redundant alias (e.g., `import os as os`).\n\nThis option is enabled by default, but you can opt-in to removal of imports via an unsafe fix.",
    )
    isort: Optional[IsortOptions] = Field(None, description="Options for the `isort` plugin.")
    logger_objects: Optional[List[str]] = Field(
        None,
        alias="logger-objects",
        description='A list of objects that should be treated equivalently to a `logging.Logger` object.\n\nThis is useful for ensuring proper diagnostics (e.g., to identify `logging` deprecations and other best-practices) for projects that re-export a `logging.Logger` object from a common module.\n\nFor example, if you have a module `logging_setup.py` with the following contents: ```python import logging\n\nlogger = logging.getLogger(__name__) ```\n\nAdding `"logging_setup.logger"` to `logger-objects` will ensure that `logging_setup.logger` is treated as a `logging.Logger` object when imported from other modules (e.g., `from logging_setup import logger`).',
    )
    mccabe: Optional[McCabeOptions] = Field(None, description="Options for the `mccabe` plugin.")
    pep8_naming: Optional[Pep8NamingOptions] = Field(None, alias="pep8-naming", description="Options for the `pep8-naming` plugin.")
    per_file_ignores: Optional[Dict[str, Any]] = Field(
        None,
        alias="per-file-ignores",
        description="A list of mappings from file pattern to rule codes or prefixes to exclude, when considering any matching files. An initial '!' negates the file pattern.",
    )
    preview: Optional[bool] = Field(
        None,
        description="Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules and fixes.",
    )
    pycodestyle: Optional[PycodestyleOptions] = Field(None, description="Options for the `pycodestyle` plugin.")
    pydoclint: Optional[PydoclintOptions] = Field(None, description="Options for the `pydoclint` plugin.")
    pydocstyle: Optional[PydocstyleOptions] = Field(None, description="Options for the `pydocstyle` plugin.")
    pyflakes: Optional[PyflakesOptions] = Field(None, description="Options for the `pyflakes` plugin.")
    pylint: Optional[PylintOptions] = Field(None, description="Options for the `pylint` plugin.")
    pyupgrade: Optional[PyUpgradeOptions] = Field(None, description="Options for the `pyupgrade` plugin.")
    ruff: Optional[RuffOptions] = Field(None, description="Options for the `ruff` plugin")
    select: Optional[List[RuleSelector]] = Field(
        None,
        description="A list of rule codes or prefixes to enable. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\n\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes. `ignore` takes precedence over `select` if the same prefix appears in both.",
    )
    task_tags: Optional[List[str]] = Field(
        None,
        alias="task-tags",
        description='A list of task tags to recognize (e.g., "TODO", "FIXME", "XXX").\n\nComments starting with these tags will be ignored by commented-out code detection (`ERA`), and skipped by line-length rules (`E501`) if [`ignore-overlong-task-comments`](#lint_pycodestyle_ignore-overlong-task-comments) is set to `true`.',
    )
    typing_extensions: Optional[bool] = Field(
        None,
        alias="typing-extensions",
        description="Whether to allow imports from the third-party `typing_extensions` module for Python versions before a symbol was added to the first-party `typing` module.\n\nMany rules try to import symbols from the `typing` module but fall back to `typing_extensions` for earlier versions of Python. This option can be used to disable this fallback behavior in cases where `typing_extensions` is not installed.",
    )
    typing_modules: Optional[List[str]] = Field(
        None,
        alias="typing-modules",
        description="A list of modules whose exports should be treated equivalently to members of the `typing` module.\n\nThis is useful for ensuring proper type annotation inference for projects that re-export `typing` and `typing_extensions` members from a compatibility module. If omitted, any members imported from modules apart from `typing` and `typing_extensions` will be treated as ordinary Python objects.",
    )
    unfixable: Optional[List[RuleSelector]] = Field(None, description="A list of rule codes or prefixes to consider non-fixable.")


class Options(BaseModel):
    class Config:
        extra = Extra.forbid

    allowed_confusables: Optional[List[constr(min_length=1, max_length=1)]] = Field(
        None,
        alias="allowed-confusables",
        description='A list of allowed "confusable" Unicode characters to ignore when enforcing `RUF001`, `RUF002`, and `RUF003`.',
    )
    analyze: Optional[AnalyzeOptions] = Field(None, description="Options to configure import map generation.")
    builtins: Optional[List[str]] = Field(
        None,
        description="A list of builtins to treat as defined references, in addition to the system builtins.",
    )
    cache_dir: Optional[str] = Field(
        None,
        alias="cache-dir",
        description="A path to the cache directory.\n\nBy default, Ruff stores cache results in a `.ruff_cache` directory in the current project root.\n\nHowever, Ruff will also respect the `RUFF_CACHE_DIR` environment variable, which takes precedence over that default.\n\nThis setting will override even the `RUFF_CACHE_DIR` environment variable, if set.",
    )
    dummy_variable_rgx: Optional[str] = Field(
        None,
        alias="dummy-variable-rgx",
        description='A regular expression used to identify "dummy" variables, or those which should be ignored when enforcing (e.g.) unused-variable rules. The default expression matches `_`, `__`, and `_var`, but not `_var_`.',
    )
    exclude: Optional[List[str]] = Field(
        None,
        description="A list of file patterns to exclude from formatting and linting.\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).\n\nNote that you'll typically want to use [`extend-exclude`](#extend-exclude) to modify the excluded paths.",
    )
    explicit_preview_rules: Optional[bool] = Field(
        None,
        alias="explicit-preview-rules",
        description="Whether to require exact codes to select preview rules. When enabled, preview rules will not be selected by prefixes â the full code of each preview rule will be required to enable the rule.",
    )
    extend: Optional[str] = Field(
        None,
        description="A path to a local `pyproject.toml` file to merge into this configuration. User home directory and environment variables will be expanded.\n\nTo resolve the current `pyproject.toml` file, Ruff will first resolve this base configuration file, then merge in any properties defined in the current configuration file.",
    )
    extend_exclude: Optional[List[str]] = Field(
        None,
        alias="extend-exclude",
        description="A list of file patterns to omit from formatting and linting, in addition to those specified by [`exclude`](#exclude).\n\nExclusions are based on globs, and can be either:\n\n- Single-path patterns, like `.mypy_cache` (to exclude any directory named `.mypy_cache` in the tree), `foo.py` (to exclude any file named `foo.py`), or `foo_*.py` (to exclude any file matching `foo_*.py` ). - Relative patterns, like `directory/foo.py` (to exclude that specific file) or `directory/*.py` (to exclude any Python files in `directory`). Note that these paths are relative to the project root (e.g., the directory containing your `pyproject.toml`).\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    extend_fixable: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-fixable",
        description="A list of rule codes or prefixes to consider fixable, in addition to those specified by [`fixable`](#lint_fixable).",
    )
    extend_ignore: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-ignore",
        description="A list of rule codes or prefixes to ignore, in addition to those specified by `ignore`.",
    )
    extend_include: Optional[List[str]] = Field(
        None,
        alias="extend-include",
        description="A list of file patterns to include when linting, in addition to those specified by [`include`](#include).\n\nInclusion are based on globs, and should be single-path patterns, like `*.pyw`, to include any file with the `.pyw` extension.\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    extend_per_file_ignores: Optional[Dict[str, Any]] = Field(
        None,
        alias="extend-per-file-ignores",
        description="A list of mappings from file pattern to rule codes or prefixes to exclude, in addition to any rules excluded by [`per-file-ignores`](#lint_per-file-ignores).",
    )
    extend_safe_fixes: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-safe-fixes",
        description="A list of rule codes or prefixes for which unsafe fixes should be considered safe.",
    )
    extend_select: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-select",
        description="A list of rule codes or prefixes to enable, in addition to those specified by [`select`](#lint_select).",
    )
    extend_unfixable: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-unfixable",
        description="A list of rule codes or prefixes to consider non-auto-fixable, in addition to those specified by [`unfixable`](#lint_unfixable).",
    )
    extend_unsafe_fixes: Optional[List[RuleSelector]] = Field(
        None,
        alias="extend-unsafe-fixes",
        description="A list of rule codes or prefixes for which safe fixes should be considered unsafe.",
    )
    external: Optional[List[str]] = Field(
        None,
        description="A list of rule codes or prefixes that are unsupported by Ruff, but should be preserved when (e.g.) validating `# noqa` directives. Useful for retaining `# noqa` directives that cover plugins not yet implemented by Ruff.",
    )
    fix: Optional[bool] = Field(
        None,
        description="Enable fix behavior by-default when running `ruff` (overridden by the `--fix` and `--no-fix` command-line flags). Only includes automatic fixes unless `--unsafe-fixes` is provided.",
    )
    fix_only: Optional[bool] = Field(
        None,
        alias="fix-only",
        description="Like [`fix`](#fix), but disables reporting on leftover violation. Implies [`fix`](#fix).",
    )
    fixable: Optional[List[RuleSelector]] = Field(
        None,
        description="A list of rule codes or prefixes to consider fixable. By default, all rules are considered fixable.",
    )
    flake8_annotations: Optional[Flake8AnnotationsOptions] = Field(
        None,
        alias="flake8-annotations",
        description="Options for the `flake8-annotations` plugin.",
    )
    flake8_bandit: Optional[Flake8BanditOptions] = Field(
        None,
        alias="flake8-bandit",
        description="Options for the `flake8-bandit` plugin.",
    )
    flake8_boolean_trap: Optional[Flake8BooleanTrapOptions] = Field(
        None,
        alias="flake8-boolean-trap",
        description="Options for the `flake8-boolean-trap` plugin.",
    )
    flake8_bugbear: Optional[Flake8BugbearOptions] = Field(
        None,
        alias="flake8-bugbear",
        description="Options for the `flake8-bugbear` plugin.",
    )
    flake8_builtins: Optional[Flake8BuiltinsOptions] = Field(
        None,
        alias="flake8-builtins",
        description="Options for the `flake8-builtins` plugin.",
    )
    flake8_comprehensions: Optional[Flake8ComprehensionsOptions] = Field(
        None,
        alias="flake8-comprehensions",
        description="Options for the `flake8-comprehensions` plugin.",
    )
    flake8_copyright: Optional[Flake8CopyrightOptions] = Field(
        None,
        alias="flake8-copyright",
        description="Options for the `flake8-copyright` plugin.",
    )
    flake8_errmsg: Optional[Flake8ErrMsgOptions] = Field(
        None,
        alias="flake8-errmsg",
        description="Options for the `flake8-errmsg` plugin.",
    )
    flake8_gettext: Optional[Flake8GetTextOptions] = Field(
        None,
        alias="flake8-gettext",
        description="Options for the `flake8-gettext` plugin.",
    )
    flake8_implicit_str_concat: Optional[Flake8ImplicitStrConcatOptions] = Field(
        None,
        alias="flake8-implicit-str-concat",
        description="Options for the `flake8-implicit-str-concat` plugin.",
    )
    flake8_import_conventions: Optional[Flake8ImportConventionsOptions] = Field(
        None,
        alias="flake8-import-conventions",
        description="Options for the `flake8-import-conventions` plugin.",
    )
    flake8_pytest_style: Optional[Flake8PytestStyleOptions] = Field(
        None,
        alias="flake8-pytest-style",
        description="Options for the `flake8-pytest-style` plugin.",
    )
    flake8_quotes: Optional[Flake8QuotesOptions] = Field(
        None,
        alias="flake8-quotes",
        description="Options for the `flake8-quotes` plugin.",
    )
    flake8_self: Optional[Flake8SelfOptions] = Field(None, alias="flake8-self", description="Options for the `flake8_self` plugin.")
    flake8_tidy_imports: Optional[Flake8TidyImportsOptions] = Field(
        None,
        alias="flake8-tidy-imports",
        description="Options for the `flake8-tidy-imports` plugin.",
    )
    flake8_type_checking: Optional[Flake8TypeCheckingOptions] = Field(
        None,
        alias="flake8-type-checking",
        description="Options for the `flake8-type-checking` plugin.",
    )
    flake8_unused_arguments: Optional[Flake8UnusedArgumentsOptions] = Field(
        None,
        alias="flake8-unused-arguments",
        description="Options for the `flake8-unused-arguments` plugin.",
    )
    force_exclude: Optional[bool] = Field(
        None,
        alias="force-exclude",
        description="Whether to enforce [`exclude`](#exclude) and [`extend-exclude`](#extend-exclude) patterns, even for paths that are passed to Ruff explicitly. Typically, Ruff will lint any paths passed in directly, even if they would typically be excluded. Setting `force-exclude = true` will cause Ruff to respect these exclusions unequivocally.\n\nThis is useful for [`pre-commit`](https://pre-commit.com/), which explicitly passes all changed files to the [`ruff-pre-commit`](https://github.com/astral-sh/ruff-pre-commit) plugin, regardless of whether they're marked as excluded by Ruff's own settings.",
    )
    format: Optional[FormatOptions] = Field(None, description="Options to configure code formatting.")
    ignore: Optional[List[RuleSelector]] = Field(
        None,
        description="A list of rule codes or prefixes to ignore. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\n\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes. `ignore` takes precedence over `select` if the same prefix appears in both.",
    )
    ignore_init_module_imports: Optional[bool] = Field(
        None,
        alias="ignore-init-module-imports",
        description="Avoid automatically removing unused imports in `__init__.py` files. Such imports will still be flagged, but with a dedicated message suggesting that the import is either added to the module's `__all__` symbol, or re-exported with a redundant alias (e.g., `import os as os`).\n\nThis option is enabled by default, but you can opt-in to removal of imports via an unsafe fix.",
    )
    include: Optional[List[str]] = Field(
        None,
        description="A list of file patterns to include when linting.\n\nInclusion are based on globs, and should be single-path patterns, like `*.pyw`, to include any file with the `.pyw` extension. `pyproject.toml` is included here not for configuration but because we lint whether e.g. the `[project]` matches the schema.\n\nNotebook files (`.ipynb` extension) are included by default on Ruff 0.6.0+.\n\nFor more information on the glob syntax, refer to the [`globset` documentation](https://docs.rs/globset/latest/globset/#syntax).",
    )
    indent_width: Optional[IndentWidth] = Field(
        None,
        alias="indent-width",
        description="The number of spaces per indentation level (tab).\n\nUsed by the formatter and when enforcing long-line violations (like `E501`) to determine the visual width of a tab.\n\nThis option changes the number of spaces the formatter inserts when using soft-tabs (`indent-style = space`).\n\nPEP 8 recommends using 4 spaces per [indentation level](https://peps.python.org/pep-0008/#indentation).",
    )
    isort: Optional[IsortOptions] = Field(None, description="Options for the `isort` plugin.")
    line_length: Optional[LineLength] = Field(
        None,
        alias="line-length",
        description="The line length to use when enforcing long-lines violations (like `E501`) and at which `isort` and the formatter prefers to wrap lines.\n\nThe length is determined by the number of characters per line, except for lines containing East Asian characters or emojis. For these lines, the [unicode width](https://unicode.org/reports/tr11/) of each character is added up to determine the length.\n\nThe value must be greater than `0` and less than or equal to `320`.\n\nNote: While the formatter will attempt to format lines such that they remain within the `line-length`, it isn't a hard upper bound, and formatted lines may exceed the `line-length`.\n\nSee [`pycodestyle.max-line-length`](#lint_pycodestyle_max-line-length) to configure different lengths for `E501` and the formatter.",
    )
    lint: Optional[LintOptions] = None
    logger_objects: Optional[List[str]] = Field(
        None,
        alias="logger-objects",
        description='A list of objects that should be treated equivalently to a `logging.Logger` object.\n\nThis is useful for ensuring proper diagnostics (e.g., to identify `logging` deprecations and other best-practices) for projects that re-export a `logging.Logger` object from a common module.\n\nFor example, if you have a module `logging_setup.py` with the following contents: ```python import logging\n\nlogger = logging.getLogger(__name__) ```\n\nAdding `"logging_setup.logger"` to `logger-objects` will ensure that `logging_setup.logger` is treated as a `logging.Logger` object when imported from other modules (e.g., `from logging_setup import logger`).',
    )
    mccabe: Optional[McCabeOptions] = Field(None, description="Options for the `mccabe` plugin.")
    namespace_packages: Optional[List[str]] = Field(
        None,
        alias="namespace-packages",
        description="Mark the specified directories as namespace packages. For the purpose of module resolution, Ruff will treat those directories and all their subdirectories as if they contained an `__init__.py` file.",
    )
    output_format: Optional[OutputFormat] = Field(
        None,
        alias="output-format",
        description='The style in which violation messages should be formatted: `"full"` (default) (shows source), `"concise"`, `"grouped"` (group messages by file), `"json"` (machine-readable), `"junit"` (machine-readable XML), `"github"` (GitHub Actions annotations), `"gitlab"` (GitLab CI code quality report), `"pylint"` (Pylint text format) or `"azure"` (Azure Pipeline logging commands).',
    )
    pep8_naming: Optional[Pep8NamingOptions] = Field(None, alias="pep8-naming", description="Options for the `pep8-naming` plugin.")
    per_file_ignores: Optional[Dict[str, Any]] = Field(
        None,
        alias="per-file-ignores",
        description="A list of mappings from file pattern to rule codes or prefixes to exclude, when considering any matching files. An initial '!' negates the file pattern.",
    )
    per_file_target_version: Optional[Dict[str, Any]] = Field(
        None,
        alias="per-file-target-version",
        description='A list of mappings from glob-style file pattern to Python version to use when checking the corresponding file(s).\n\nThis may be useful for overriding the global Python version settings in `target-version` or `requires-python` for a subset of files. For example, if you have a project with a minimum supported Python version of 3.9 but a subdirectory of developer scripts that want to use a newer feature like the `match` statement from Python 3.10, you can use `per-file-target-version` to specify `"developer_scripts/*.py" = "py310"`.\n\nThis setting is used by the linter to enforce any enabled version-specific lint rules, as well as by the formatter for any version-specific formatting options, such as parenthesizing context managers on Python 3.10+.',
    )
    preview: Optional[bool] = Field(
        None,
        description="Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules, fixes, and formatting.",
    )
    pycodestyle: Optional[PycodestyleOptions] = Field(None, description="Options for the `pycodestyle` plugin.")
    pydocstyle: Optional[PydocstyleOptions] = Field(None, description="Options for the `pydocstyle` plugin.")
    pyflakes: Optional[PyflakesOptions] = Field(None, description="Options for the `pyflakes` plugin.")
    pylint: Optional[PylintOptions] = Field(None, description="Options for the `pylint` plugin.")
    pyupgrade: Optional[PyUpgradeOptions] = Field(None, description="Options for the `pyupgrade` plugin.")
    required_version: Optional[RequiredVersion] = Field(
        None,
        alias="required-version",
        description="Enforce a requirement on the version of Ruff, to enforce at runtime. If the version of Ruff does not meet the requirement, Ruff will exit with an error.\n\nUseful for unifying results across many environments, e.g., with a `pyproject.toml` file.\n\nAccepts a [PEP 440](https://peps.python.org/pep-0440/) specifier, like `==0.3.1` or `>=0.3.1`.",
    )
    respect_gitignore: Optional[bool] = Field(
        None,
        alias="respect-gitignore",
        description="Whether to automatically exclude files that are ignored by `.ignore`, `.gitignore`, `.git/info/exclude`, and global `gitignore` files. Enabled by default.",
    )
    select: Optional[List[RuleSelector]] = Field(
        None,
        description="A list of rule codes or prefixes to enable. Prefixes can specify exact rules (like `F841`), entire categories (like `F`), or anything in between.\n\nWhen breaking ties between enabled and disabled rules (via `select` and `ignore`, respectively), more specific prefixes override less specific prefixes. `ignore` takes precedence over `select` if the same prefix appears in both.",
    )
    show_fixes: Optional[bool] = Field(
        None,
        alias="show-fixes",
        description="Whether to show an enumeration of all fixed lint violations (overridden by the `--show-fixes` command-line flag).",
    )
    src: Optional[List[str]] = Field(
        None,
        description='The directories to consider when resolving first- vs. third-party imports.\n\nWhen omitted, the `src` directory will typically default to including both:\n\n1. The directory containing the nearest `pyproject.toml`, `ruff.toml`, or `.ruff.toml` file (the "project root"). 2. The `"src"` subdirectory of the project root.\n\nThese defaults ensure that Ruff supports both flat layouts and `src` layouts out-of-the-box. (If a configuration file is explicitly provided (e.g., via the `--config` command-line flag), the current working directory will be considered the project root.)\n\nAs an example, consider an alternative project structure, like:\n\n```text my_project âââ pyproject.toml âââ lib âââ my_package âââ __init__.py âââ foo.py âââ bar.py ```\n\nIn this case, the `./lib` directory should be included in the `src` option (e.g., `src = ["lib"]`), such that when resolving imports, `my_package.foo` is considered first-party.\n\nThis field supports globs. For example, if you have a series of Python packages in a `python_modules` directory, `src = ["python_modules/*"]` would expand to incorporate all packages in that directory. User home directory and environment variables will also be expanded.',
    )
    target_version: Optional[PythonVersion] = Field(
        None,
        alias="target-version",
        description='The minimum Python version to target, e.g., when considering automatic code upgrades, like rewriting type annotations. Ruff will not propose changes using features that are not available in the given version.\n\nFor example, to represent supporting Python >=3.10 or ==3.10 specify `target-version = "py310"`.\n\nIf you\'re already using a `pyproject.toml` file, we recommend `project.requires-python` instead, as it\'s based on Python packaging standards, and will be respected by other tools. For example, Ruff treats the following as identical to `target-version = "py38"`:\n\n```toml [project] requires-python = ">=3.8" ```\n\nIf both are specified, `target-version` takes precedence over `requires-python`. See [_Inferring the Python version_](https://docs.astral.sh/ruff/configuration/#inferring-the-python-version) for a complete description of how the `target-version` is determined when left unspecified.\n\nNote that a stub file can [sometimes make use of a typing feature](https://typing.python.org/en/latest/spec/distributing.html#syntax) before it is available at runtime, as long as the stub does not make use of new *syntax*. For example, a type checker will understand `int | str` in a stub as being a `Union` type annotation, even if the type checker is run using Python 3.9, despite the fact that the `|` operator can only be used to create union types at runtime on Python 3.10+. As such, Ruff will often recommend newer features in a stub file than it would for an equivalent runtime file with the same target version.',
    )
    task_tags: Optional[List[str]] = Field(
        None,
        alias="task-tags",
        description='A list of task tags to recognize (e.g., "TODO", "FIXME", "XXX").\n\nComments starting with these tags will be ignored by commented-out code detection (`ERA`), and skipped by line-length rules (`E501`) if [`ignore-overlong-task-comments`](#lint_pycodestyle_ignore-overlong-task-comments) is set to `true`.',
    )
    typing_modules: Optional[List[str]] = Field(
        None,
        alias="typing-modules",
        description="A list of modules whose exports should be treated equivalently to members of the `typing` module.\n\nThis is useful for ensuring proper type annotation inference for projects that re-export `typing` and `typing_extensions` members from a compatibility module. If omitted, any members imported from modules apart from `typing` and `typing_extensions` will be treated as ordinary Python objects.",
    )
    unfixable: Optional[List[RuleSelector]] = Field(None, description="A list of rule codes or prefixes to consider non-fixable.")
    unsafe_fixes: Optional[bool] = Field(
        None,
        alias="unsafe-fixes",
        description="Enable application of unsafe fixes. If excluded, a hint will be displayed when unsafe fixes are available. If set to false, the hint will be hidden.",
    )
